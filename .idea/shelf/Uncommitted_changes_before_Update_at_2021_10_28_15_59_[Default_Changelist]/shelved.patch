Index: open_im_sdk/open_im_sdk_conversation_msg.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package open_im_sdk\r\n\r\nimport (\r\n\t//\"bytes\"\r\n\t//\"encoding/gob\"\r\n\t\"encoding/json\"\r\n\t\"fmt\"\r\n\t\"github.com/golang/protobuf/proto\"\r\n\t\"github.com/gorilla/websocket\"\r\n\t\"net/http\"\r\n\t\"os\"\r\n\t\"sort\"\r\n\t\"sync\"\r\n\t\"time\"\r\n)\r\n\r\nfunc (u *UserRelated) GetAllConversationList(callback Base) {\r\n\tgo func() {\r\n\t\terr, list := u.getAllConversationListModel()\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(203, err.Error())\r\n\t\t} else {\r\n\t\t\tif list != nil {\r\n\t\t\t\tcallback.OnSuccess(structToJsonString(list))\r\n\t\t\t} else {\r\n\t\t\t\tcallback.OnSuccess(structToJsonString([]ConversationStruct{}))\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n}\r\nfunc (u *UserRelated) GetOneConversation(sourceID string, sessionType int, callback Base) {\r\n\tgo func() {\r\n\t\tconversationID := GetConversationIDBySessionType(sourceID, sessionType)\r\n\t\terr, c := u.getOneConversationModel(conversationID)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(203, err.Error())\r\n\t\t} else {\r\n\t\t\t//\r\n\t\t\tif c.ConversationID == \"\" {\r\n\r\n\t\t\t\tc.ConversationID = conversationID\r\n\t\t\t\tc.ConversationType = sessionType\r\n\t\t\t\tc.RecvMsgOpt = 1\r\n\r\n\t\t\t\tswitch sessionType {\r\n\t\t\t\tcase SingleChatType:\r\n\t\t\t\t\tc.UserID = sourceID\r\n\t\t\t\t\tfaceUrl, name, err := u.getUserNameAndFaceUrlByUid(sourceID)\r\n\t\t\t\t\tif err != nil {\r\n\t\t\t\t\t\tcallback.OnError(301, err.Error())\r\n\t\t\t\t\t\tsdkLog(\"getUserNameAndFaceUrlByUid err:\", err)\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\t\t\t\t\tc.ShowName = name\r\n\t\t\t\t\tc.FaceURL = faceUrl\r\n\t\t\t\tcase GroupChatType:\r\n\t\t\t\t\tc.GroupID = sourceID\r\n\t\t\t\t\tfaceUrl, name, err := u.getGroupNameAndFaceUrlByUid(sourceID)\r\n\t\t\t\t\tif err != nil {\r\n\t\t\t\t\t\tcallback.OnError(301, err.Error())\r\n\t\t\t\t\t\tsdkLog(\"getGroupNameAndFaceUrlByUid err:\", err)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tc.ShowName = name\r\n\t\t\t\t\tc.FaceURL = faceUrl\r\n\r\n\t\t\t\t}\r\n\t\t\t\terr = u.addConversationOrUpdateLatestMsg(&c, conversationID)\r\n\t\t\t\tif err != nil {\r\n\t\t\t\t\tcallback.OnError(301, err.Error())\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tcallback.OnSuccess(structToJsonString(c))\r\n\r\n\t\t\t} else {\r\n\t\t\t\tcallback.OnSuccess(structToJsonString(c))\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n}\r\nfunc (u *UserRelated) GetMultipleConversation(conversationIDList string, callback Base) {\r\n\tgo func() {\r\n\t\tvar c []string\r\n\t\terr := json.Unmarshal([]byte(conversationIDList), &c)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(200, err.Error())\r\n\t\t\tsdkLog(\"Unmarshal failed\", err.Error())\r\n\t\t}\r\n\t\terr, list := u.getMultipleConversationModel(c)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(203, err.Error())\r\n\t\t} else {\r\n\t\t\tif list != nil {\r\n\t\t\t\tcallback.OnSuccess(structToJsonString(list))\r\n\t\t\t} else {\r\n\t\t\t\tcallback.OnSuccess(structToJsonString([]ConversationStruct{}))\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n}\r\nfunc (u *UserRelated) DeleteConversation(conversationID string, callback Base) {\r\n\tgo func() {\r\n\t\t//Transaction operation required\r\n\t\tvar sourceID string\r\n\t\terr, c := u.getOneConversationModel(conversationID)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(201, err.Error())\r\n\t\t\treturn\r\n\t\t}\r\n\t\tswitch c.ConversationType {\r\n\t\tcase SingleChatType:\r\n\t\t\tsourceID = c.UserID\r\n\t\tcase GroupChatType:\r\n\t\t\tsourceID = c.GroupID\r\n\t\t}\r\n\t\t//标记删除与此会话相关的消息\r\n\t\terr = u.setMessageStatusBySourceID(sourceID, MsgStatusHasDeleted, c.ConversationType)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(202, err.Error())\r\n\t\t\treturn\r\n\t\t}\r\n\t\t//重置该会话信息，空会话\r\n\t\terr = u.ResetConversation(conversationID)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(203, err.Error())\r\n\t\t\treturn\r\n\t\t} else {\r\n\t\t\tcallback.OnSuccess(\"\")\r\n\t\t\t_ = u.triggerCmdUpdateConversation(updateConNode{ConId: conversationID, Action: ConAndUnreadChange})\r\n\t\t}\r\n\t}()\r\n}\r\nfunc (u *UserRelated) SetConversationDraft(conversationID, draftText string, callback Base) {\r\n\terr := u.setConversationDraftModel(conversationID, draftText, getCurrentTimestampByNano())\r\n\tif err != nil {\r\n\t\tcallback.OnError(203, err.Error())\r\n\t} else {\r\n\t\tcallback.OnSuccess(\"\")\r\n\t\t_ = u.triggerCmdUpdateConversation(updateConNode{ConId: conversationID, Action: ConAndUnreadChange})\r\n\t}\r\n}\r\nfunc (u *UserRelated) PinConversation(conversationID string, isPinned bool, callback Base) {\r\n\tvar i int\r\n\tif isPinned {\r\n\t\ti = 1\r\n\t} else {\r\n\t\ti = 0\r\n\t}\r\n\terr := u.pinConversationModel(conversationID, i)\r\n\tif err != nil {\r\n\t\tcallback.OnError(203, err.Error())\r\n\t} else {\r\n\t\tcallback.OnSuccess(\"\")\r\n\t\t_ = u.triggerCmdUpdateConversation(updateConNode{ConId: conversationID, Action: ConAndUnreadChange})\r\n\t}\r\n\r\n}\r\nfunc (u *UserRelated) GetTotalUnreadMsgCount(callback Base) {\r\n\tcount, err := u.getTotalUnreadMsgCountModel()\r\n\tif err != nil {\r\n\t\tcallback.OnError(203, err.Error())\r\n\t} else {\r\n\t\tcallback.OnSuccess(int32ToString(count))\r\n\t}\r\n\r\n}\r\n\r\ntype OnConversationListener interface {\r\n\tOnSyncServerStart()\r\n\tOnSyncServerFinish()\r\n\tOnSyncServerFailed()\r\n\tOnNewConversation(conversationList string)\r\n\tOnConversationChanged(conversationList string)\r\n\tOnTotalUnreadMessageCountChanged(totalUnreadCount int32)\r\n}\r\n\r\nfunc (u *UserRelated) SetConversationListener(listener OnConversationListener) {\r\n\tif u.ConversationListenerx != nil {\r\n\t\tsdkLog(\"only one \")\r\n\t\treturn\r\n\t}\r\n\tu.ConversationListenerx = listener\r\n}\r\n\r\ntype OnAdvancedMsgListener interface {\r\n\tOnRecvNewMessage(message string)\r\n\tOnRecvC2CReadReceipt(msgReceiptList string)\r\n\tOnRecvMessageRevoked(msgId string)\r\n}\r\n\r\nfunc (u *UserRelated) AddAdvancedMsgListener(listener OnAdvancedMsgListener) {\r\n\tif listener == nil {\r\n\t\tsdkLog(\"AddAdvancedMsgListener listener is null\")\r\n\t\treturn\r\n\t}\r\n\tif len(u.ConversationListener.MsgListenerList) == 1 {\r\n\t\tsdkLog(\"u.ConversationListener.MsgListenerList == 1\")\r\n\t\treturn\r\n\t}\r\n\tu.ConversationListener.MsgListenerList = append(u.ConversationListener.MsgListenerList, listener)\r\n}\r\n\r\nfunc (u *UserRelated) ForceSyncMsg() bool {\r\n\tif u.syncSeq2Msg() == nil {\r\n\t\treturn true\r\n\t} else {\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\nfunc (u *UserRelated) ForceSyncJoinedGroup() {\r\n\tu.syncJoinedGroupInfo()\r\n}\r\n\r\nfunc (u *UserRelated) ForceSyncJoinedGroupMember() {\r\n\r\n\tu.syncJoinedGroupMember()\r\n}\r\n\r\nfunc (u *UserRelated) ForceSyncGroupRequest() {\r\n\tu.syncGroupRequest()\r\n}\r\n\r\nfunc (u *UserRelated) ForceSyncApplyGroupRequest() {\r\n\tu.syncApplyGroupRequest()\r\n}\r\n\r\ntype SendMsgCallBack interface {\r\n\tBase\r\n\tOnProgress(progress int)\r\n}\r\n\r\nfunc (u *UserRelated) CreateTextMessage(text string) string {\r\n\ts := MsgStruct{}\r\n\tu.initBasicInfo(&s, UserMsgType, Text)\r\n\ts.Content = text\r\n\ts.AtElem.AtUserList = []string{}\r\n\treturn structToJsonString(s)\r\n}\r\nfunc (u *UserRelated) CreateTextAtMessage(text, atUserList string) string {\r\n\tvar users []string\r\n\t_ = json.Unmarshal([]byte(atUserList), &users)\r\n\ts := MsgStruct{}\r\n\tu.initBasicInfo(&s, UserMsgType, AtText)\r\n\ts.ForceList = users\r\n\ts.AtElem.Text = text\r\n\ts.AtElem.AtUserList = users\r\n\ts.Content = structToJsonString(s.AtElem)\r\n\treturn structToJsonString(s)\r\n}\r\nfunc (u *UserRelated) CreateLocationMessage(description string, longitude, latitude float64) string {\r\n\ts := MsgStruct{}\r\n\tu.initBasicInfo(&s, UserMsgType, Location)\r\n\ts.AtElem.AtUserList = []string{}\r\n\ts.LocationElem.Description = description\r\n\ts.LocationElem.Longitude = longitude\r\n\ts.LocationElem.Latitude = latitude\r\n\ts.Content = structToJsonString(s.LocationElem)\r\n\treturn structToJsonString(s)\r\n}\r\nfunc (u *UserRelated) CreateCustomMessage(data, extension string, description string) string {\r\n\ts := MsgStruct{}\r\n\tu.initBasicInfo(&s, UserMsgType, Custom)\r\n\ts.AtElem.AtUserList = []string{}\r\n\ts.CustomElem.Data = data\r\n\ts.CustomElem.Extension = extension\r\n\ts.CustomElem.Description = description\r\n\ts.Content = structToJsonString(s.CustomElem)\r\n\treturn structToJsonString(s)\r\n}\r\nfunc (u *UserRelated) CreateQuoteMessage(text string, message string) string {\r\n\ts, qs := MsgStruct{}, MsgStruct{}\r\n\t_ = json.Unmarshal([]byte(message), &qs)\r\n\tu.initBasicInfo(&s, UserMsgType, Quote)\r\n\t//Avoid nested references\r\n\tif qs.ContentType == Quote {\r\n\t\tqs.Content = qs.QuoteElem.Text\r\n\t\tqs.ContentType = Text\r\n\t}\r\n\ts.AtElem.AtUserList = []string{}\r\n\ts.QuoteElem.Text = text\r\n\ts.QuoteElem.QuoteMessage = &qs\r\n\ts.Content = structToJsonString(s.QuoteElem)\r\n\treturn structToJsonString(s)\r\n}\r\nfunc (u *UserRelated) CreateCardMessage(cardInfo string) string {\r\n\ts := MsgStruct{}\r\n\tu.initBasicInfo(&s, UserMsgType, Card)\r\n\ts.Content = cardInfo\r\n\ts.AtElem.AtUserList = []string{}\r\n\treturn structToJsonString(s)\r\n\r\n}\r\nfunc (u *UserRelated) CreateVideoMessageFromFullPath(videoFullPath string, videoType string, duration int64, snapshotFullPath string) string {\r\n\tvar wg sync.WaitGroup\r\n\twg.Add(1)\r\n\tgo func() {\r\n\t\tdstFile := fileTmpPath(videoFullPath) //a->b\r\n\t\ts, err := copyFile(videoFullPath, dstFile)\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"open file failed: \", err, videoFullPath)\r\n\t\t}\r\n\t\tsdkLog(\"videoFullPath dstFile\", videoFullPath, dstFile, s)\r\n\t\tdstFile = fileTmpPath(snapshotFullPath) //a->b\r\n\t\ts, err = copyFile(snapshotFullPath, dstFile)\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"open file failed: \", err, snapshotFullPath)\r\n\t\t}\r\n\t\tsdkLog(\"snapshotFullPath dstFile\", snapshotFullPath, dstFile, s)\r\n\t\twg.Done()\r\n\t}()\r\n\r\n\ts := MsgStruct{}\r\n\tu.initBasicInfo(&s, UserMsgType, Video)\r\n\ts.VideoElem.VideoPath = videoFullPath\r\n\ts.VideoElem.VideoType = videoType\r\n\ts.VideoElem.Duration = duration\r\n\tif snapshotFullPath == \"\" {\r\n\t\ts.VideoElem.SnapshotPath = \"\"\r\n\t} else {\r\n\t\ts.VideoElem.SnapshotPath = snapshotFullPath\r\n\t}\r\n\tfi, err := os.Stat(s.VideoElem.VideoPath)\r\n\tif err != nil {\r\n\t\tsdkLog(err.Error())\r\n\t\treturn \"\"\r\n\t}\r\n\ts.VideoElem.VideoSize = fi.Size()\r\n\tif snapshotFullPath != \"\" {\r\n\t\timageInfo, err := getImageInfo(s.VideoElem.SnapshotPath)\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"CreateVideoMessage err:\", err.Error())\r\n\t\t\treturn \"\"\r\n\t\t}\r\n\t\ts.VideoElem.SnapshotHeight = imageInfo.Height\r\n\t\ts.VideoElem.SnapshotWidth = imageInfo.Width\r\n\t\ts.VideoElem.SnapshotSize = imageInfo.Size\r\n\t}\r\n\twg.Wait()\r\n\ts.AtElem.AtUserList = []string{}\r\n\ts.Content = structToJsonString(s.VideoElem)\r\n\treturn structToJsonString(s)\r\n}\r\nfunc (u *UserRelated) CreateFileMessageFromFullPath(fileFullPath string, fileName string) string {\r\n\tvar wg sync.WaitGroup\r\n\twg.Add(1)\r\n\tgo func() {\r\n\t\tdstFile := fileTmpPath(fileFullPath)\r\n\t\t_, err := copyFile(fileFullPath, dstFile)\r\n\t\tsdkLog(\"copy file, \", fileFullPath, dstFile)\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"open file failed: \", err, fileFullPath)\r\n\r\n\t\t}\r\n\t\twg.Done()\r\n\t}()\r\n\ts := MsgStruct{}\r\n\tu.initBasicInfo(&s, UserMsgType, File)\r\n\ts.FileElem.FilePath = fileFullPath\r\n\tfi, err := os.Stat(fileFullPath)\r\n\tif err != nil {\r\n\t\tsdkLog(\"get file info err:\", err.Error())\r\n\t\treturn \"\"\r\n\t}\r\n\ts.FileElem.FileSize = fi.Size()\r\n\ts.FileElem.FileName = fileName\r\n\ts.AtElem.AtUserList = []string{}\r\n\treturn structToJsonString(s)\r\n}\r\nfunc (u *UserRelated) CreateImageMessageFromFullPath(imageFullPath string) string {\r\n\tvar wg sync.WaitGroup\r\n\twg.Add(1)\r\n\tgo func() {\r\n\t\tdstFile := fileTmpPath(imageFullPath) //a->b\r\n\t\t_, err := copyFile(imageFullPath, dstFile)\r\n\t\tsdkLog(\"copy file, \", imageFullPath, dstFile)\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"open file failed: \", err, imageFullPath)\r\n\t\t}\r\n\t\twg.Done()\r\n\t}()\r\n\r\n\ts := MsgStruct{}\r\n\tu.initBasicInfo(&s, UserMsgType, Picture)\r\n\ts.PictureElem.SourcePath = imageFullPath\r\n\tsdkLog(\"ImageMessage  path:\", s.PictureElem.SourcePath)\r\n\timageInfo, err := getImageInfo(s.PictureElem.SourcePath)\r\n\tif err != nil {\r\n\t\tsdkLog(\"getImageInfo err:\", err.Error())\r\n\t\treturn \"\"\r\n\t}\r\n\ts.PictureElem.SourcePicture.Width = imageInfo.Width\r\n\ts.PictureElem.SourcePicture.Height = imageInfo.Height\r\n\ts.PictureElem.SourcePicture.Type = imageInfo.Type\r\n\ts.PictureElem.SourcePicture.Size = imageInfo.Size\r\n\twg.Wait()\r\n\ts.AtElem.AtUserList = []string{}\r\n\ts.Content = structToJsonString(s.PictureElem)\r\n\treturn structToJsonString(s)\r\n}\r\nfunc (u *UserRelated) CreateSoundMessageFromFullPath(soundPath string, duration int64) string {\r\n\tvar wg sync.WaitGroup\r\n\twg.Add(1)\r\n\tgo func() {\r\n\t\tdstFile := fileTmpPath(soundPath) //a->b\r\n\t\t_, err := copyFile(soundPath, dstFile)\r\n\t\tsdkLog(\"copy file, \", soundPath, dstFile)\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"open file failed: \", err, soundPath)\r\n\t\t}\r\n\t\twg.Done()\r\n\t}()\r\n\tsdkLog(\"init base info \")\r\n\ts := MsgStruct{}\r\n\tu.initBasicInfo(&s, UserMsgType, Sound)\r\n\ts.SoundElem.SoundPath = soundPath\r\n\ts.SoundElem.Duration = duration\r\n\tfi, err := os.Stat(s.SoundElem.SoundPath)\r\n\tif err != nil {\r\n\t\tsdkLog(err.Error(), s.SoundElem.SoundPath)\r\n\t\treturn \"\"\r\n\t}\r\n\ts.SoundElem.DataSize = fi.Size()\r\n\twg.Wait()\r\n\ts.AtElem.AtUserList = []string{}\r\n\ts.Content = structToJsonString(s.SoundElem)\r\n\tsdkLog(\"to string\")\r\n\treturn structToJsonString(s)\r\n}\r\nfunc (u *UserRelated) CreateImageMessage(imagePath string) string {\r\n\tsdkLog(\"start1: \", time.Now())\r\n\ts := MsgStruct{}\r\n\tu.initBasicInfo(&s, UserMsgType, Picture)\r\n\ts.PictureElem.SourcePath = SvrConf.DbDir + imagePath\r\n\tsdkLog(\"ImageMessage  path:\", s.PictureElem.SourcePath)\r\n\tsdkLog(\"end1\", time.Now())\r\n\r\n\tsdkLog(\"start2 \", time.Now())\r\n\timageInfo, err := getImageInfo(s.PictureElem.SourcePath)\r\n\tif err != nil {\r\n\t\tsdkLog(\"CreateImageMessage err:\", err.Error())\r\n\t\treturn \"\"\r\n\t}\r\n\tsdkLog(\"end2\", time.Now())\r\n\r\n\ts.PictureElem.SourcePicture.Width = imageInfo.Width\r\n\ts.PictureElem.SourcePicture.Height = imageInfo.Height\r\n\ts.PictureElem.SourcePicture.Type = imageInfo.Type\r\n\ts.PictureElem.SourcePicture.Size = imageInfo.Size\r\n\ts.AtElem.AtUserList = []string{}\r\n\ts.Content = structToJsonString(s.PictureElem)\r\n\treturn structToJsonString(s)\r\n}\r\n\r\nfunc (u *UserRelated) CreateImageMessageByURL(sourcePicture, bigPicture, snapshotPicture string) string {\r\n\ts := MsgStruct{}\r\n\tvar p PictureBaseInfo\r\n\t_ = json.Unmarshal([]byte(sourcePicture), &p)\r\n\ts.PictureElem.SourcePicture = p\r\n\t_ = json.Unmarshal([]byte(bigPicture), &p)\r\n\ts.PictureElem.BigPicture = p\r\n\t_ = json.Unmarshal([]byte(snapshotPicture), &p)\r\n\ts.PictureElem.SnapshotPicture = p\r\n\tu.initBasicInfo(&s, UserMsgType, Picture)\r\n\ts.AtElem.AtUserList = []string{}\r\n\ts.Content = structToJsonString(s.PictureElem)\r\n\treturn structToJsonString(s)\r\n}\r\n\r\nfunc (u *UserRelated) SendMessageNotOss(callback SendMsgCallBack, message, receiver, groupID string, onlineUserOnly bool) string {\r\n\tvar conversationID string\r\n\tr := SendMsgRespFromServer{}\r\n\ta := paramsUserSendMsg{}\r\n\ts := MsgStruct{}\r\n\tm := make(map[string]interface{})\r\n\terr := json.Unmarshal([]byte(message), &s)\r\n\tif err != nil {\r\n\t\tcallback.OnError(2038, err.Error())\r\n\t\tsdkLog(\"json unmarshal err:\", err.Error())\r\n\t\treturn \"\"\r\n\t}\r\n\r\n\tgo func() {\r\n\t\tc := ConversationStruct{\r\n\t\t\tConversationType:  int(s.SessionType),\r\n\t\t\tRecvMsgOpt:        1,\r\n\t\t\tLatestMsgSendTime: s.CreateTime,\r\n\t\t}\r\n\t\tif receiver == \"\" && groupID == \"\" {\r\n\t\t\tcallback.OnError(201, \"args err\")\r\n\t\t\treturn\r\n\t\t} else if receiver == \"\" {\r\n\t\t\ts.SessionType = GroupChatType\r\n\t\t\ts.RecvID = groupID\r\n\t\t\ts.GroupID = groupID\r\n\t\t\tconversationID = GetConversationIDBySessionType(groupID, GroupChatType)\r\n\t\t\tc.GroupID = groupID\r\n\t\t\tfaceUrl, name, err := u.getGroupNameAndFaceUrlByUid(groupID)\r\n\t\t\tif err != nil {\r\n\t\t\t\tsdkLog(\"getGroupNameAndFaceUrlByUid err:\", err)\r\n\t\t\t\tcallback.OnError(202, err.Error())\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tc.ShowName = name\r\n\t\t\tc.FaceURL = faceUrl\r\n\t\t\tgroupMemberList, err := u.getLocalGroupMemberListByGroupID(groupID)\r\n\t\t\tif err != nil {\r\n\t\t\t\tsdkLog(\"getLocalGroupMemberListByGroupID err:\", err)\r\n\t\t\t\tcallback.OnError(202, err.Error())\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tisExistInGroup := func(target string, groupMemberList []groupMemberFullInfo) bool {\r\n\r\n\t\t\t\tfor _, element := range groupMemberList {\r\n\r\n\t\t\t\t\tif target == element.UserId {\r\n\t\t\t\t\t\treturn true\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false\r\n\r\n\t\t\t}(s.SendID, groupMemberList)\r\n\t\t\tif !isExistInGroup {\r\n\t\t\t\tsdkLog(\"SendGroupMessage err:\", \"not exist in this group\")\r\n\t\t\t\tcallback.OnError(208, \"not exist in this group\")\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\ts.SessionType = SingleChatType\r\n\t\t\ts.RecvID = receiver\r\n\t\t\tconversationID = GetConversationIDBySessionType(receiver, SingleChatType)\r\n\t\t\tc.UserID = receiver\r\n\t\t\tfaceUrl, name, err := u.getUserNameAndFaceUrlByUid(receiver)\r\n\t\t\tif err != nil {\r\n\t\t\t\tsdkLog(\"getUserNameAndFaceUrlByUid err:\", err)\r\n\t\t\t\tcallback.OnError(301, err.Error())\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tc.FaceURL = faceUrl\r\n\t\t\tc.ShowName = name\r\n\t\t}\r\n\t\tuserInfo, err := u.getLoginUserInfoFromLocal()\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"getLoginUserInfoFromLocal err:\", err)\r\n\t\t\treturn\r\n\t\t}\r\n\t\ts.SenderFaceURL = userInfo.Icon\r\n\t\ts.SenderNickName = userInfo.Name\r\n\t\tc.ConversationID = conversationID\r\n\t\tc.LatestMsg = structToJsonString(s)\r\n\t\terr = u.insertMessageToLocalOrUpdateContent(&s)\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"insertMessageToLocalOrUpdateContent err:\", err)\r\n\t\t\tcallback.OnError(202, err.Error())\r\n\t\t\treturn\r\n\t\t}\r\n\t\t_ = u.triggerCmdUpdateConversation(updateConNode{conversationID, AddConOrUpLatMsg,\r\n\t\t\tc})\r\n\t\t_ = u.triggerCmdUpdateConversation(updateConNode{conversationID, ConChange, \"\"})\r\n\r\n\t\t//Protocol conversion\r\n\t\ta.ReqIdentifier = 1003\r\n\t\ta.PlatformID = s.PlatformID\r\n\t\ta.SendID = s.SendID\r\n\t\ta.SenderFaceURL = s.SenderFaceURL\r\n\t\ta.SenderNickName = s.SenderNickName\r\n\t\ta.OperationID = operationIDGenerator()\r\n\t\ta.Data.SessionType = s.SessionType\r\n\t\ta.Data.MsgFrom = s.MsgFrom\r\n\t\ta.Data.ForceList = []string{}\r\n\t\ta.Data.ContentType = s.ContentType\r\n\t\ta.Data.RecvID = s.RecvID\r\n\t\ta.Data.ForceList = s.ForceList\r\n\t\ta.Data.Content = s.Content\r\n\t\ta.Data.ClientMsgID = s.ClientMsgID\r\n\t\tif onlineUserOnly {\r\n\t\t\ta.Data.Options[\"history\"] = 0\r\n\t\t\ta.Data.Options[\"persistent\"] = 0\r\n\t\t} else {\r\n\t\t\ta.Data.Options = m\r\n\t\t}\r\n\t\ta.Data.OffLineInfo = m\r\n\t\tbMsg, err := post2Api(sendMsgRouter, a, u.token)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(http.StatusInternalServerError, err.Error())\r\n\t\t\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t} else if err = json.Unmarshal(bMsg, &r); err != nil {\r\n\t\t\tcallback.OnError(200, err.Error()+\"  \"+string(bMsg))\r\n\t\t\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t} else {\r\n\t\t\tif r.ErrCode != 0 {\r\n\t\t\t\tcallback.OnError(r.ErrCode, r.ErrMsg)\r\n\t\t\t\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t\t} else {\r\n\t\t\t\tcallback.OnSuccess(\"\")\r\n\t\t\t\tcallback.OnProgress(100)\r\n\t\t\t\t_ = u.updateMessageTimeAndMsgIDStatus(r.Data.ClientMsgID, r.Data.SendTime, MsgStatusSendSuccess)\r\n\t\t\t\ts.ServerMsgID = r.Data.ServerMsgID\r\n\t\t\t\ts.SendTime = r.Data.SendTime\r\n\t\t\t\ts.Status = MsgStatusSendSuccess\r\n\t\t\t\tc.LatestMsg = structToJsonString(s)\r\n\t\t\t\tc.LatestMsgSendTime = s.SendTime\r\n\t\t\t\t_ = u.triggerCmdUpdateConversation(updateConNode{conversationID, AddConOrUpLatMsg,\r\n\t\t\t\t\tc})\r\n\t\t\t\t_ = u.triggerCmdUpdateConversation(updateConNode{conversationID, ConChange, \"\"})\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n\treturn s.ClientMsgID\r\n}\r\nfunc (u *UserRelated) CreateSoundMessageByURL(soundBaseInfo string) string {\r\n\ts := MsgStruct{}\r\n\tvar soundElem SoundBaseInfo\r\n\t_ = json.Unmarshal([]byte(soundBaseInfo), &soundElem)\r\n\ts.SoundElem = soundElem\r\n\tu.initBasicInfo(&s, UserMsgType, Sound)\r\n\ts.AtElem.AtUserList = []string{}\r\n\ts.Content = structToJsonString(s.SoundElem)\r\n\treturn structToJsonString(s)\r\n}\r\n\r\nfunc (u *UserRelated) CreateSoundMessage(soundPath string, duration int64) string {\r\n\ts := MsgStruct{}\r\n\tu.initBasicInfo(&s, UserMsgType, Sound)\r\n\ts.SoundElem.SoundPath = SvrConf.DbDir + soundPath\r\n\ts.SoundElem.Duration = duration\r\n\tfi, err := os.Stat(s.SoundElem.SoundPath)\r\n\tif err != nil {\r\n\t\tsdkLog(err.Error())\r\n\t\treturn \"\"\r\n\t}\r\n\ts.SoundElem.DataSize = fi.Size()\r\n\ts.AtElem.AtUserList = []string{}\r\n\ts.Content = structToJsonString(s.SoundElem)\r\n\treturn structToJsonString(s)\r\n}\r\n\r\nfunc (u *UserRelated) CreateVideoMessageByURL(videoBaseInfo string) string {\r\n\ts := MsgStruct{}\r\n\tvar videoElem VideoBaseInfo\r\n\t_ = json.Unmarshal([]byte(videoBaseInfo), &videoElem)\r\n\ts.VideoElem = videoElem\r\n\tu.initBasicInfo(&s, UserMsgType, Video)\r\n\ts.AtElem.AtUserList = []string{}\r\n\ts.Content = structToJsonString(s.VideoElem)\r\n\treturn structToJsonString(s)\r\n}\r\n\r\nfunc (u *UserRelated) CreateVideoMessage(videoPath string, videoType string, duration int64, snapshotPath string) string {\r\n\ts := MsgStruct{}\r\n\tu.initBasicInfo(&s, UserMsgType, Video)\r\n\ts.VideoElem.VideoPath = SvrConf.DbDir + videoPath\r\n\ts.VideoElem.VideoType = videoType\r\n\ts.VideoElem.Duration = duration\r\n\tif snapshotPath == \"\" {\r\n\t\ts.VideoElem.SnapshotPath = \"\"\r\n\t} else {\r\n\t\ts.VideoElem.SnapshotPath = SvrConf.DbDir + snapshotPath\r\n\t}\r\n\tfi, err := os.Stat(s.VideoElem.VideoPath)\r\n\tif err != nil {\r\n\t\tsdkLog(err.Error())\r\n\t\treturn \"\"\r\n\t}\r\n\ts.VideoElem.VideoSize = fi.Size()\r\n\tif snapshotPath != \"\" {\r\n\t\timageInfo, err := getImageInfo(s.VideoElem.SnapshotPath)\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"CreateVideoMessage err:\", err.Error())\r\n\t\t\treturn \"\"\r\n\t\t}\r\n\t\ts.VideoElem.SnapshotHeight = imageInfo.Height\r\n\t\ts.VideoElem.SnapshotWidth = imageInfo.Width\r\n\t\ts.VideoElem.SnapshotSize = imageInfo.Size\r\n\t}\r\n\ts.AtElem.AtUserList = []string{}\r\n\ts.Content = structToJsonString(s.VideoElem)\r\n\treturn structToJsonString(s)\r\n}\r\nfunc (u *UserRelated) CreateFileMessageByURL(fileBaseInfo string) string {\r\n\ts := MsgStruct{}\r\n\tvar fileElem FileBaseInfo\r\n\t_ = json.Unmarshal([]byte(fileBaseInfo), &fileElem)\r\n\ts.FileElem = fileElem\r\n\tu.initBasicInfo(&s, UserMsgType, File)\r\n\ts.AtElem.AtUserList = []string{}\r\n\ts.Content = structToJsonString(s.FileElem)\r\n\treturn structToJsonString(s)\r\n}\r\nfunc (u *UserRelated) CreateFileMessage(filePath string, fileName string) string {\r\n\ts := MsgStruct{}\r\n\tu.initBasicInfo(&s, UserMsgType, File)\r\n\ts.FileElem.FilePath = SvrConf.DbDir + filePath\r\n\ts.FileElem.FileName = fileName\r\n\tfi, err := os.Stat(s.FileElem.FilePath)\r\n\tif err != nil {\r\n\t\tsdkLog(err.Error())\r\n\t\treturn \"\"\r\n\t}\r\n\ts.FileElem.FileSize = fi.Size()\r\n\ts.AtElem.AtUserList = []string{}\r\n\treturn structToJsonString(s)\r\n}\r\nfunc (u *UserRelated) CreateMergerMessage(messageList, title, summaryList string) string {\r\n\tvar messages []*MsgStruct\r\n\tvar summaries []string\r\n\ts := MsgStruct{}\r\n\terr := json.Unmarshal([]byte(messageList), &messages)\r\n\tif err != nil {\r\n\t\tfmt.Println(\"CreateMergerMessage err:\", err.Error())\r\n\t}\r\n\t_ = json.Unmarshal([]byte(summaryList), &summaries)\r\n\tu.initBasicInfo(&s, UserMsgType, Merger)\r\n\ts.MergeElem.AbstractList = summaries\r\n\ts.MergeElem.Title = title\r\n\ts.MergeElem.MultiMessage = messages\r\n\ts.AtElem.AtUserList = []string{}\r\n\ts.Content = structToJsonString(s.MergeElem)\r\n\treturn structToJsonString(s)\r\n}\r\nfunc (u *UserRelated) CreateForwardMessage(m string) string {\r\n\ts := MsgStruct{}\r\n\terr := json.Unmarshal([]byte(m), &s)\r\n\tif err != nil {\r\n\t\tsdkLog(\"json unmarshal err:\", err.Error())\r\n\t\treturn \"\"\r\n\t}\r\n\tif s.Status != MsgStatusSendSuccess {\r\n\t\tsdkLog(\"only send success message can be revoked\")\r\n\t\treturn \"\"\r\n\t}\r\n\r\n\tu.initBasicInfo(&s, UserMsgType, s.ContentType)\r\n\ts.AtElem.AtUserList = []string{}\r\n\treturn structToJsonString(s)\r\n}\r\n\r\nfunc (u *UserRelated) SendMessage(callback SendMsgCallBack, message, receiver, groupID string, onlineUserOnly bool) string {\r\n\tvar conversationID string\r\n\t//r := SendMsgRespFromServer{}\r\n\ta := paramsUserSendMsg{}\r\n\ts := MsgStruct{}\r\n\tm := make(map[string]interface{})\r\n\terr := json.Unmarshal([]byte(message), &s)\r\n\tif err != nil {\r\n\t\tcallback.OnError(2038, err.Error())\r\n\t\tsdkLog(\"json unmarshal err:\", err.Error())\r\n\t\treturn \"\"\r\n\t}\r\n\tgo func() {\r\n\t\tc := ConversationStruct{\r\n\t\t\tConversationType:  int(s.SessionType),\r\n\t\t\tRecvMsgOpt:        1,\r\n\t\t\tLatestMsgSendTime: s.CreateTime,\r\n\t\t}\r\n\t\tif receiver == \"\" && groupID == \"\" {\r\n\t\t\tcallback.OnError(201, \"args err\")\r\n\t\t\treturn\r\n\t\t} else if receiver == \"\" {\r\n\t\t\ts.SessionType = GroupChatType\r\n\t\t\ts.RecvID = groupID\r\n\t\t\ts.GroupID = groupID\r\n\t\t\tconversationID = GetConversationIDBySessionType(groupID, GroupChatType)\r\n\t\t\tc.GroupID = groupID\r\n\t\t\tfaceUrl, name, err := u.getGroupNameAndFaceUrlByUid(groupID)\r\n\t\t\tif err != nil {\r\n\t\t\t\tsdkLog(\"getGroupNameAndFaceUrlByUid err:\", err)\r\n\t\t\t\tcallback.OnError(202, err.Error())\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tc.ShowName = name\r\n\t\t\tc.FaceURL = faceUrl\r\n\t\t\tgroupMemberList, err := u.getLocalGroupMemberListByGroupID(groupID)\r\n\t\t\tif err != nil {\r\n\t\t\t\tsdkLog(\"getLocalGroupMemberListByGroupID err:\", err)\r\n\t\t\t\tcallback.OnError(202, err.Error())\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tisExistInGroup := func(target string, groupMemberList []groupMemberFullInfo) bool {\r\n\r\n\t\t\t\tfor _, element := range groupMemberList {\r\n\r\n\t\t\t\t\tif target == element.UserId {\r\n\t\t\t\t\t\treturn true\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false\r\n\r\n\t\t\t}(s.SendID, groupMemberList)\r\n\t\t\tif !isExistInGroup {\r\n\t\t\t\tsdkLog(\"SendGroupMessage err:\", \"not exist in this group\")\r\n\t\t\t\tcallback.OnError(208, \"not exist in this group\")\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\ts.SessionType = SingleChatType\r\n\t\t\ts.RecvID = receiver\r\n\t\t\tconversationID = GetConversationIDBySessionType(receiver, SingleChatType)\r\n\t\t\tc.UserID = receiver\r\n\r\n\t\t\tfaceUrl, name, err := u.getUserNameAndFaceUrlByUid(receiver)\r\n\t\t\tif err != nil {\r\n\t\t\t\tsdkLog(\"getUserNameAndFaceUrlByUid err:\", err)\r\n\t\t\t\tcallback.OnError(301, err.Error())\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tc.FaceURL = faceUrl\r\n\t\t\tc.ShowName = name\r\n\r\n\t\t}\r\n\t\tuserInfo, err := u.getLoginUserInfoFromLocal()\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"getLoginUserInfoFromLocal err:\", err)\r\n\t\t\treturn\r\n\t\t}\r\n\t\ts.SenderFaceURL = userInfo.Icon\r\n\t\ts.SenderNickName = userInfo.Name\r\n\t\tc.ConversationID = conversationID\r\n\t\tc.LatestMsg = structToJsonString(s)\r\n\t\terr = u.insertMessageToLocalOrUpdateContent(&s)\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"insertMessageToLocalOrUpdateContent err:\", err)\r\n\t\t\tcallback.OnError(202, err.Error())\r\n\t\t\treturn\r\n\t\t}\r\n\t\t_ = u.triggerCmdUpdateConversation(updateConNode{conversationID, AddConOrUpLatMsg,\r\n\t\t\tc})\r\n\t\t_ = u.triggerCmdUpdateConversation(updateConNode{conversationID, ConChange, \"\"})\r\n\t\tvar delFile []string\r\n\t\tswitch s.ContentType {\r\n\t\tcase Text:\r\n\t\tcase AtText:\r\n\t\tcase Location:\r\n\t\tcase Custom:\r\n\t\tcase Merger:\r\n\t\tcase Quote:\r\n\t\tcase Card:\r\n\t\tcase Picture:\r\n\t\t\tvar sourcePath string\r\n\t\t\tif fileExist(s.PictureElem.SourcePath) {\r\n\t\t\t\tsourcePath = s.PictureElem.SourcePath\r\n\t\t\t\tdelFile = append(delFile, fileTmpPath(s.PictureElem.SourcePath))\r\n\t\t\t} else {\r\n\t\t\t\tsourcePath = fileTmpPath(s.PictureElem.SourcePath)\r\n\t\t\t\tdelFile = append(delFile, sourcePath)\r\n\t\t\t}\r\n\t\t\tsdkLog(\"file: \", sourcePath, delFile)\r\n\t\t\tsourceUrl, uuid, err := u.uploadImage(sourcePath, callback)\r\n\t\t\tif err != nil {\r\n\t\t\t\tsdkLog(\"oss Picture upload err\", err.Error())\r\n\t\t\t\tcallback.OnError(301, err.Error())\r\n\t\t\t\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t\t\treturn\r\n\t\t\t} else {\r\n\t\t\t\ts.PictureElem.SourcePicture.Url = sourceUrl\r\n\t\t\t\ts.PictureElem.SourcePicture.UUID = uuid\r\n\t\t\t\ts.PictureElem.SnapshotPicture.Url = sourceUrl + \"?imageView2/2/w/\" + ZoomScale + \"/h/\" + ZoomScale\r\n\t\t\t\ts.PictureElem.SnapshotPicture.Width = int32(stringToInt(ZoomScale))\r\n\t\t\t\ts.PictureElem.SnapshotPicture.Height = int32(stringToInt(ZoomScale))\r\n\t\t\t\ts.Content = structToJsonString(s.PictureElem)\r\n\t\t\t}\r\n\t\tcase Sound:\r\n\t\t\tvar sourcePath string\r\n\t\t\tif fileExist(s.SoundElem.SoundPath) {\r\n\t\t\t\tsourcePath = s.SoundElem.SoundPath\r\n\t\t\t\tdelFile = append(delFile, fileTmpPath(s.SoundElem.SoundPath))\r\n\t\t\t} else {\r\n\t\t\t\tsourcePath = fileTmpPath(s.SoundElem.SoundPath)\r\n\t\t\t\tdelFile = append(delFile, sourcePath)\r\n\t\t\t}\r\n\t\t\tsdkLog(\"file: \", sourcePath, delFile)\r\n\t\t\tsoundURL, uuid, err := u.uploadSound(sourcePath, callback)\r\n\t\t\tif err != nil {\r\n\t\t\t\tcallback.OnError(301, err.Error())\r\n\t\t\t\tfmt.Println(\"oss Sound upload err\", 111)\r\n\t\t\t\tsdkLog(\"uploadSound err:\", err.Error())\r\n\t\t\t\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t\t\treturn\r\n\t\t\t} else {\r\n\t\t\t\ts.SoundElem.SourceURL = soundURL\r\n\t\t\t\ts.SoundElem.UUID = uuid\r\n\t\t\t\ts.Content = structToJsonString(s.SoundElem)\r\n\t\t\t}\r\n\t\tcase Video:\r\n\t\t\tvar videoPath string\r\n\t\t\tvar snapPath string\r\n\t\t\tif fileExist(s.VideoElem.VideoPath) {\r\n\t\t\t\tvideoPath = s.VideoElem.VideoPath\r\n\t\t\t\tsnapPath = s.VideoElem.SnapshotPath\r\n\t\t\t\tdelFile = append(delFile, fileTmpPath(s.VideoElem.VideoPath))\r\n\t\t\t\tdelFile = append(delFile, fileTmpPath(s.VideoElem.SnapshotPath))\r\n\t\t\t} else {\r\n\t\t\t\tvideoPath = fileTmpPath(s.VideoElem.VideoPath)\r\n\t\t\t\tsnapPath = fileTmpPath(s.VideoElem.SnapshotPath)\r\n\t\t\t\tdelFile = append(delFile, videoPath)\r\n\t\t\t\tdelFile = append(delFile, snapPath)\r\n\t\t\t}\r\n\t\t\tsdkLog(\"file: \", videoPath, snapPath, delFile)\r\n\t\t\tsnapshotURL, snapshotUUID, videoURL, videoUUID, err := u.uploadVideo(videoPath, snapPath, callback)\r\n\t\t\tif err != nil {\r\n\t\t\t\tcallback.OnError(301, err.Error())\r\n\t\t\t\tsdkLog(\"oss  Video upload err:\", err.Error())\r\n\t\t\t\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t\t\treturn\r\n\t\t\t} else {\r\n\t\t\t\ts.VideoElem.VideoURL = videoURL\r\n\t\t\t\ts.VideoElem.SnapshotUUID = snapshotUUID\r\n\t\t\t\ts.VideoElem.SnapshotURL = snapshotURL\r\n\t\t\t\ts.VideoElem.VideoUUID = videoUUID\r\n\t\t\t\ts.Content = structToJsonString(s.VideoElem)\r\n\t\t\t}\r\n\t\tcase File:\r\n\t\t\tfileURL, fileUUID, err := u.uploadFile(s.FileElem.FilePath, callback)\r\n\t\t\tif err != nil {\r\n\t\t\t\tcallback.OnError(301, err.Error())\r\n\t\t\t\tsdkLog(\"oss  File upload err:\", err.Error())\r\n\t\t\t\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t\t\treturn\r\n\r\n\t\t\t} else {\r\n\t\t\t\ts.FileElem.SourceURL = fileURL\r\n\t\t\t\ts.FileElem.UUID = fileUUID\r\n\t\t\t\ts.Content = structToJsonString(s.FileElem)\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\tcallback.OnError(2038, \"Not currently supported \")\r\n\t\t\tsdkLog(\"Not currently supported \", s.ContentType)\r\n\t\t\treturn\r\n\t\t}\r\n\t\t//Store messages to local database\r\n\t\terr = u.insertMessageToLocalOrUpdateContent(&s)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(202, err.Error())\r\n\t\t\treturn\r\n\t\t}\r\n\t\t//Protocol conversion\r\n\t\ta.ReqIdentifier = 1003\r\n\t\ta.PlatformID = s.PlatformID\r\n\t\ta.SendID = s.SendID\r\n\t\ta.SenderFaceURL = s.SenderFaceURL\r\n\t\ta.SenderNickName = s.SenderNickName\r\n\t\ta.OperationID = operationIDGenerator()\r\n\t\ta.Data.SessionType = s.SessionType\r\n\t\ta.Data.MsgFrom = s.MsgFrom\r\n\t\ta.Data.ContentType = s.ContentType\r\n\t\ta.Data.RecvID = s.RecvID\r\n\t\ta.Data.ForceList = s.ForceList\r\n\t\ta.Data.Content = s.Content\r\n\t\ta.Data.ClientMsgID = s.ClientMsgID\r\n\t\tif onlineUserOnly {\r\n\t\t\ta.Data.Options[\"history\"] = 0\r\n\t\t\ta.Data.Options[\"persistent\"] = 0\r\n\t\t} else {\r\n\t\t\ta.Data.Options = m\r\n\t\t}\r\n\t\ta.Data.OffLineInfo = m\r\n\r\n\t\toptionsFlag := make(map[string]int32, 2)\r\n\t\tif onlineUserOnly {\r\n\t\t\toptionsFlag[\"history\"] = 0\r\n\t\t\toptionsFlag[\"persistent\"] = 0\r\n\t\t} else {\r\n\t\t}\r\n\t\twsMsgData := UserSendMsgReq{\r\n\r\n\t\t\tOptions:        optionsFlag,\r\n\t\t\tSenderNickName: s.SenderNickName,\r\n\t\t\tPlatformID:     s.PlatformID,\r\n\t\t\tSessionType:    s.SessionType,\r\n\t\t\tMsgFrom:        s.MsgFrom,\r\n\t\t\tContentType:    s.ContentType,\r\n\t\t\tRecvID:         s.RecvID,\r\n\t\t\tForceList:      s.ForceList,\r\n\t\t\tContent:        s.Content,\r\n\t\t\tClientMsgID:    s.ClientMsgID,\r\n\t\t}\r\n\t\tmsgIncr, ch := u.AddCh()\r\n\t\tvar wsReq GeneralWsReq\r\n\t\twsReq.ReqIdentifier = WSSendMsg\r\n\t\twsReq.OperationID = operationIDGenerator()\r\n\t\twsReq.SendID = s.SendID\r\n\t\t//wsReq.Token = u.token\r\n\t\twsReq.MsgIncr = msgIncr\r\n\t\twsReq.Data, err = proto.Marshal(&wsMsgData)\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"Marshal failed \", err.Error())\r\n\t\t\tLogFReturn(nil)\r\n\t\t\tcallback.OnError(http.StatusInternalServerError, err.Error())\r\n\t\t\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tSendFlag := false\r\n\t\tvar connSend *websocket.Conn\r\n\t\tfor tr := 0; tr < 3; tr++ {\r\n\t\t\tLogBegin(\"WriteMsg\", wsReq.OperationID)\r\n\t\t\terr, connSend = u.WriteMsg(wsReq)\r\n\t\t\tLogEnd(\"WriteMsg \", wsReq.OperationID, connSend)\r\n\t\t\tif err != nil {\r\n\t\t\t\tsdkLog(\"ws writeMsg  err:,\", wsReq.OperationID, err.Error(), tr)\r\n\t\t\t\ttime.Sleep(time.Duration(5) * time.Second)\r\n\t\t\t} else {\r\n\t\t\t\tsdkLog(\"writeMsg  retry ok\", wsReq.OperationID, tr)\r\n\t\t\t\tSendFlag = true\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif SendFlag == false {\r\n\t\t\tu.DelCh(msgIncr)\r\n\t\t\tcallback.OnError(http.StatusInternalServerError, err.Error())\r\n\t\t\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\ttimeout := 300\r\n\t\tbreakFlag := 0\r\n\t\tfor {\r\n\t\t\tif breakFlag == 1 {\r\n\t\t\t\tsdkLog(\"break \", wsReq.OperationID)\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\tselect {\r\n\t\t\tcase r := <-ch:\r\n\t\t\t\tsdkLog(\"ws  ch recvMsg success:,\", wsReq.OperationID)\r\n\t\t\t\tif r.ErrCode != 0 {\r\n\t\t\t\t\tcallback.OnError(r.ErrCode, r.ErrMsg)\r\n\t\t\t\t\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcallback.OnSuccess(\"\")\r\n\t\t\t\t\tcallback.OnProgress(100)\r\n\t\t\t\t\tfor _, v := range delFile {\r\n\t\t\t\t\t\terr := os.Remove(v)\r\n\t\t\t\t\t\tif err != nil {\r\n\t\t\t\t\t\t\tsdkLog(\"remove failed,\", err.Error(), v)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsdkLog(\"remove file: \", v)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar sendMsgResp UserSendMsgResp\r\n\t\t\t\t\terr = proto.Unmarshal(r.Data, &sendMsgResp)\r\n\t\t\t\t\tif err != nil {\r\n\t\t\t\t\t\tsdkLog(\"Unmarshal failed \", err.Error())\r\n\t\t\t\t\t\t//\tcallback.OnError(http.StatusInternalServerError, err.Error())\r\n\t\t\t\t\t\t//\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t\t\t\t\t//\tu.DelCh(msgIncr)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t_ = u.updateMessageTimeAndMsgIDStatus(sendMsgResp.ClientMsgID, sendMsgResp.SendTime, MsgStatusSendSuccess)\r\n\r\n\t\t\t\t\ts.ServerMsgID = sendMsgResp.ServerMsgID\r\n\t\t\t\t\ts.SendTime = sendMsgResp.SendTime\r\n\t\t\t\t\ts.Status = MsgStatusSendSuccess\r\n\t\t\t\t\tc.LatestMsg = structToJsonString(s)\r\n\t\t\t\t\tc.LatestMsgSendTime = s.SendTime\r\n\t\t\t\t\t_ = u.triggerCmdUpdateConversation(updateConNode{conversationID, AddConOrUpLatMsg,\r\n\t\t\t\t\t\tc})\r\n\t\t\t\t\t_ = u.triggerCmdUpdateConversation(updateConNode{conversationID, ConChange, \"\"})\r\n\t\t\t\t}\r\n\t\t\t\tbreakFlag = 1\r\n\t\t\tcase <-time.After(time.Second * time.Duration(timeout)):\r\n\t\t\t\tvar flag bool\r\n\t\t\t\tsdkLog(\"ws ch recvMsg err: \", wsReq.OperationID)\r\n\t\t\t\tif connSend != u.conn {\r\n\t\t\t\t\tsdkLog(\"old conn != current conn  \", connSend, u.conn)\r\n\t\t\t\t\tflag = false // error\r\n\t\t\t\t} else {\r\n\t\t\t\t\tflag = false //error\r\n\t\t\t\t\tfor tr := 0; tr < 3; tr++ {\r\n\t\t\t\t\t\terr = u.sendPingMsg()\r\n\t\t\t\t\t\tif err != nil {\r\n\t\t\t\t\t\t\tsdkLog(\"sendPingMsg failed \", wsReq.OperationID, err.Error(), tr)\r\n\t\t\t\t\t\t\ttime.Sleep(time.Duration(30) * time.Second)\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsdkLog(\"sendPingMsg ok \", wsReq.OperationID)\r\n\t\t\t\t\t\t\tflag = true //wait continue\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif flag == false {\r\n\t\t\t\t\tcallback.OnError(http.StatusRequestTimeout, http.StatusText(http.StatusRequestTimeout))\r\n\t\t\t\t\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t\t\t\tsdkLog(\"onError callback \", wsReq.OperationID)\r\n\t\t\t\t\tbreakFlag = 1\r\n\t\t\t\t\tbreak\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsdkLog(\"wait resp continue\", wsReq.OperationID)\r\n\t\t\t\t\tbreakFlag = 0\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tu.DelCh(msgIncr)\r\n\r\n\t\t//bMsg, err := post2Api(sendMsgRouter, a, u.token)\r\n\t\t//if err != nil {\r\n\t\t//\tcallback.OnError(http.StatusInternalServerError, err.Error())\r\n\t\t//\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t//} else if err = json.Unmarshal(bMsg, &r); err != nil {\r\n\t\t//\tcallback.OnError(200, err.Error()+\"  \"+string(bMsg))\r\n\t\t//\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t//} else {\r\n\t\t//\tif r.ErrCode != 0 {\r\n\t\t//\t\tcallback.OnError(r.ErrCode, r.ErrMsg)\r\n\t\t//\t\tu.sendMessageFailedHandle(&s, &c, conversationID)\r\n\t\t//\t} else {\r\n\t\t//\t\tcallback.OnSuccess(\"\")\r\n\t\t//\t\tcallback.OnProgress(100)\r\n\t\t//\r\n\t\t//\t\tfor _, v := range delFile {\r\n\t\t//\t\t\terr := os.Remove(v)\r\n\t\t//\t\t\tif err != nil {\r\n\t\t//\t\t\t\tsdkLog(\"remove failed,\", err.Error(), v)\r\n\t\t//\t\t\t}\r\n\t\t//\t\t\tsdkLog(\"remove file: \", v)\r\n\t\t//\t\t}\r\n\t\t//\t\t_ = u.updateMessageTimeAndMsgIDStatus(r.Data.ClientMsgID, r.Data.SendTime, MsgStatusSendSuccess)\r\n\t\t//\t\ts.ServerMsgID = r.Data.ServerMsgID\r\n\t\t//\t\ts.SendTime = r.Data.SendTime\r\n\t\t//\t\ts.Status = MsgStatusSendSuccess\r\n\t\t//\t\tc.LatestMsg = structToJsonString(s)\r\n\t\t//\t\tc.LatestMsgSendTime = s.SendTime\r\n\t\t//\t\t_ = u.triggerCmdUpdateConversation(updateConNode{conversationID, AddConOrUpLatMsg,\r\n\t\t//\t\t\tc})\r\n\t\t//\t\t_ = u.triggerCmdUpdateConversation(updateConNode{conversationID, ConChange, \"\"})\r\n\t\t//\t}\r\n\t\t//}\r\n\t}()\r\n\treturn s.ClientMsgID\r\n}\r\n\r\nfunc (u *UserRelated) GetHistoryMessageList(callback Base, getMessageOptions string) {\r\n\tgo func() {\r\n\t\tfmt.Println(\"GetHistoryMessageList\", getMessageOptions)\r\n\t\tvar sourceID string\r\n\t\tvar conversationID string\r\n\t\tvar startTime int64\r\n\t\tvar latestMsg MsgStruct\r\n\t\tvar sessionType int\r\n\t\tp := PullMsgReq{}\r\n\t\terr := json.Unmarshal([]byte(getMessageOptions), &p)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(200, err.Error())\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif p.UserID == \"\" {\r\n\t\t\tsourceID = p.GroupID\r\n\t\t\tconversationID = GetConversationIDBySessionType(sourceID, GroupChatType)\r\n\t\t\tsessionType = GroupChatType\r\n\t\t} else {\r\n\t\t\tsourceID = p.UserID\r\n\t\t\tconversationID = GetConversationIDBySessionType(sourceID, SingleChatType)\r\n\t\t\tsessionType = SingleChatType\r\n\t\t}\r\n\t\tif p.StartMsg == nil {\r\n\t\t\terr, m := u.getConversationLatestMsgModel(conversationID)\r\n\t\t\tif err != nil {\r\n\t\t\t\tcallback.OnError(200, err.Error())\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif m == \"\" {\r\n\t\t\t\tstartTime = 0\r\n\t\t\t} else {\r\n\t\t\t\terr := json.Unmarshal([]byte(m), &latestMsg)\r\n\t\t\t\tif err != nil {\r\n\t\t\t\t\tfmt.Println(\"get history err :\", err)\r\n\t\t\t\t\tcallback.OnError(200, err.Error())\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tstartTime = latestMsg.SendTime + TimeOffset\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tstartTime = p.StartMsg.SendTime\r\n\t\t}\r\n\t\tfmt.Println(\"sourceID:\", sourceID, \"startTime:\", startTime, \"count:\", p.Count)\r\n\t\terr, list := u.getHistoryMessage(sourceID, startTime, p.Count, sessionType)\r\n\t\tsort.Sort(list)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(203, err.Error())\r\n\t\t} else {\r\n\t\t\tif list != nil {\r\n\t\t\t\tcallback.OnSuccess(structToJsonString(list))\r\n\t\t\t} else {\r\n\t\t\t\tcallback.OnSuccess(structToJsonString([]MsgStruct{}))\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n}\r\nfunc (u *UserRelated) RevokeMessage(callback Base, message string) {\r\n\tgo func() {\r\n\t\tvar receiver, groupID string\r\n\t\tc := MsgStruct{}\r\n\t\terr := json.Unmarshal([]byte(message), &c)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(200, err.Error())\r\n\t\t\treturn\r\n\t\t}\r\n\t\ts, err := u.getOneMessage(c.ClientMsgID)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(201, \"getOneMessage err\")\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif s.Status != MsgStatusSendSuccess {\r\n\t\t\tcallback.OnError(201, \"only send success message can be revoked\")\r\n\t\t\treturn\r\n\t\t}\r\n\t\tsdkLog(\"test data\", s)\r\n\t\t//Send message internally\r\n\t\tswitch s.SessionType {\r\n\t\tcase SingleChatType:\r\n\t\t\treceiver = s.RecvID\r\n\t\tcase GroupChatType:\r\n\t\t\tgroupID = s.RecvID\r\n\t\tdefault:\r\n\t\t\tcallback.OnError(200, \"args err\")\r\n\t\t}\r\n\t\ts.Content = s.ClientMsgID\r\n\t\ts.ClientMsgID = getMsgID(s.SendID)\r\n\t\ts.ContentType = Revoke\r\n\t\terr = u.autoSendMsg(s, receiver, groupID, false, true, false)\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"autoSendMsg revokeMessage err:\", err.Error())\r\n\t\t\tcallback.OnError(300, err.Error())\r\n\r\n\t\t} else {\r\n\t\t\terr = u.setMessageStatus(s.Content, MsgStatusRevoked)\r\n\t\t\tif err != nil {\r\n\t\t\t\tsdkLog(\"setLocalMessageStatus revokeMessage err:\", err.Error())\r\n\t\t\t\tcallback.OnError(300, err.Error())\r\n\t\t\t} else {\r\n\t\t\t\tcallback.OnSuccess(\"\")\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n}\r\nfunc (u *UserRelated) TypingStatusUpdate(receiver, msgTip string) {\r\n\tgo func() {\r\n\t\ts := MsgStruct{}\r\n\t\tu.initBasicInfo(&s, UserMsgType, Typing)\r\n\t\ts.Content = msgTip\r\n\t\terr := u.autoSendMsg(&s, receiver, \"\", true, false, false)\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"TypingStatusUpdate err:\", err)\r\n\t\t} else {\r\n\t\t\tsdkLog(\"TypingStatusUpdate success!!!\")\r\n\t\t}\r\n\t}()\r\n}\r\nfunc (u *UserRelated) MarkC2CMessageAsRead(callback Base, receiver string, msgIDList string) {\r\n\tgo func() {\r\n\t\ts := MsgStruct{}\r\n\t\tu.initBasicInfo(&s, UserMsgType, HasReadReceipt)\r\n\t\ts.Content = msgIDList\r\n\t\tsdkLog(\"MarkC2CMessageAsRead: send Message\")\r\n\t\terr := u.autoSendMsg(&s, receiver, \"\", false, false, false)\r\n\t\tif err != nil {\r\n\t\t\tsdkLog(\"MarkC2CMessageAsRead  err:\", err.Error())\r\n\t\t\tcallback.OnError(300, err.Error())\r\n\t\t} else {\r\n\t\t\tcallback.OnSuccess(\"\")\r\n\t\t}\r\n\t}()\r\n}\r\nfunc (u *UserRelated) MarkSingleMessageHasRead(callback Base, userID string) {\r\n\tgo func() {\r\n\t\tconversationID := GetConversationIDBySessionType(userID, SingleChatType)\r\n\t\tif err := u.setSingleMessageHasRead(userID); err != nil {\r\n\t\t\tcallback.OnError(201, err.Error())\r\n\t\t} else {\r\n\t\t\tcallback.OnSuccess(\"\")\r\n\t\t\tu.triggerCmdUpdateConversation(updateConNode{ConId: conversationID, Action: UnreadCountSetZero})\r\n\t\t}\r\n\t}()\r\n}\r\nfunc (u *UserRelated) MarkGroupMessageHasRead(callback Base, groupID string) {\r\n\tgo func() {\r\n\t\tconversationID := GetConversationIDBySessionType(groupID, GroupChatType)\r\n\t\tif err := u.setGroupMessageHasRead(groupID); err != nil {\r\n\t\t\tcallback.OnError(201, err.Error())\r\n\t\t} else {\r\n\t\t\tcallback.OnSuccess(\"\")\r\n\t\t\tu.triggerCmdUpdateConversation(updateConNode{ConId: conversationID, Action: UnreadCountSetZero})\r\n\t\t}\r\n\t}()\r\n}\r\nfunc (u *UserRelated) DeleteMessageFromLocalStorage(callback Base, message string) {\r\n\tgo func() {\r\n\t\tvar conversation ConversationStruct\r\n\t\tvar latestMsg MsgStruct\r\n\t\tvar conversationID string\r\n\t\tvar sourceID string\r\n\t\ts := MsgStruct{}\r\n\t\terr := json.Unmarshal([]byte(message), &s)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(200, err.Error())\r\n\t\t\treturn\r\n\t\t}\r\n\t\terr = u.setMessageStatus(s.ClientMsgID, MsgStatusHasDeleted)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(202, err.Error())\r\n\t\t\treturn\r\n\t\t}\r\n\t\tcallback.OnSuccess(\"\")\r\n\t\tif s.SessionType == GroupChatType {\r\n\t\t\tconversationID = GetConversationIDBySessionType(s.RecvID, GroupChatType)\r\n\t\t\tsourceID = s.RecvID\r\n\r\n\t\t} else if s.SessionType == SingleChatType {\r\n\t\t\tif s.SendID != u.LoginUid {\r\n\t\t\t\tconversationID = GetConversationIDBySessionType(s.SendID, SingleChatType)\r\n\t\t\t\tsourceID = s.SendID\r\n\t\t\t} else {\r\n\t\t\t\tconversationID = GetConversationIDBySessionType(s.RecvID, SingleChatType)\r\n\t\t\t\tsourceID = s.RecvID\r\n\t\t\t}\r\n\t\t}\r\n\t\t_, m := u.getConversationLatestMsgModel(conversationID)\r\n\t\tif m != \"\" {\r\n\t\t\terr := json.Unmarshal([]byte(m), &latestMsg)\r\n\t\t\tif err != nil {\r\n\t\t\t\tfmt.Println(\"DeleteMessage err :\", err)\r\n\t\t\t\tcallback.OnError(200, err.Error())\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tsdkLog(\"err ,conversation has been deleted\")\r\n\t\t}\r\n\r\n\t\tif s.ClientMsgID == latestMsg.ClientMsgID { //If the deleted message is the latest message of the conversation, update the latest message of the conversation\r\n\t\t\terr, list := u.getHistoryMessage(sourceID, s.SendTime+TimeOffset, 1, int(s.SessionType))\r\n\t\t\tif err != nil {\r\n\t\t\t\tsdkLog(\"DeleteMessageFromLocalStorage database err:\", err.Error())\r\n\t\t\t}\r\n\t\t\tconversation.ConversationID = conversationID\r\n\t\t\tif list == nil {\r\n\t\t\t\tconversation.LatestMsg = \"\"\r\n\t\t\t\tconversation.LatestMsgSendTime = getCurrentTimestampByNano()\r\n\t\t\t} else {\r\n\t\t\t\tconversation.LatestMsg = structToJsonString(list[0])\r\n\t\t\t\tconversation.LatestMsgSendTime = list[0].SendTime\r\n\t\t\t}\r\n\t\t\terr = u.triggerCmdUpdateConversation(updateConNode{ConId: conversationID, Action: AddConOrUpLatMsg, Args: conversation})\r\n\t\t\tif err != nil {\r\n\t\t\t\tsdkLog(\"DeleteMessageFromLocalStorage triggerCmdUpdateConversation err:\", err.Error())\r\n\t\t\t}\r\n\t\t\t_ = u.triggerCmdUpdateConversation(updateConNode{conversationID, ConChange, \"\"})\r\n\r\n\t\t}\r\n\t}()\r\n}\r\n\r\nfunc (u *UserRelated) InsertSingleMessageToLocalStorage(callback Base, message, userID, sender string) string {\r\n\ts := MsgStruct{}\r\n\terr := json.Unmarshal([]byte(message), &s)\r\n\tif err != nil {\r\n\t\tcallback.OnError(200, err.Error())\r\n\t\treturn \"\"\r\n\t}\r\n\ts.SendID = sender\r\n\ts.RecvID = userID\r\n\t//Generate client message primary key\r\n\ts.ClientMsgID = getMsgID(s.SendID)\r\n\ts.SendTime = getCurrentTimestampByNano()\r\n\tgo func() {\r\n\t\tif err = u.insertMessageToLocalOrUpdateContent(&s); err != nil {\r\n\t\t\tcallback.OnError(201, err.Error())\r\n\t\t} else {\r\n\t\t\tcallback.OnSuccess(\"\")\r\n\t\t}\r\n\t}()\r\n\treturn s.ClientMsgID\r\n}\r\n\r\nfunc (u *UserRelated) FindMessages(callback Base, messageIDList string) {\r\n\tgo func() {\r\n\t\tvar c []string\r\n\t\terr := json.Unmarshal([]byte(messageIDList), &c)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(200, err.Error())\r\n\t\t\tsdkLog(\"Unmarshal failed, \", err.Error())\r\n\r\n\t\t}\r\n\t\terr, list := u.getMultipleMessageModel(c)\r\n\t\tif err != nil {\r\n\t\t\tcallback.OnError(203, err.Error())\r\n\t\t} else {\r\n\t\t\tif list != nil {\r\n\t\t\t\tcallback.OnSuccess(structToJsonString(list))\r\n\t\t\t} else {\r\n\t\t\t\tcallback.OnSuccess(structToJsonString([]MsgStruct{}))\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/open_im_sdk/open_im_sdk_conversation_msg.go b/open_im_sdk/open_im_sdk_conversation_msg.go
--- a/open_im_sdk/open_im_sdk_conversation_msg.go	(revision 3cf60c86d0b1958ca24189e6bc0c1b87f9f406c5)
+++ b/open_im_sdk/open_im_sdk_conversation_msg.go	(date 1635322090054)
@@ -738,9 +738,9 @@
 func (u *UserRelated) SendMessage(callback SendMsgCallBack, message, receiver, groupID string, onlineUserOnly bool) string {
 	var conversationID string
 	//r := SendMsgRespFromServer{}
-	a := paramsUserSendMsg{}
+	//a := paramsUserSendMsg{}
 	s := MsgStruct{}
-	m := make(map[string]interface{})
+	//m := make(map[string]interface{})
 	err := json.Unmarshal([]byte(message), &s)
 	if err != nil {
 		callback.OnError(2038, err.Error())
@@ -935,26 +935,26 @@
 			return
 		}
 		//Protocol conversion
-		a.ReqIdentifier = 1003
-		a.PlatformID = s.PlatformID
-		a.SendID = s.SendID
-		a.SenderFaceURL = s.SenderFaceURL
-		a.SenderNickName = s.SenderNickName
-		a.OperationID = operationIDGenerator()
-		a.Data.SessionType = s.SessionType
-		a.Data.MsgFrom = s.MsgFrom
-		a.Data.ContentType = s.ContentType
-		a.Data.RecvID = s.RecvID
-		a.Data.ForceList = s.ForceList
-		a.Data.Content = s.Content
-		a.Data.ClientMsgID = s.ClientMsgID
-		if onlineUserOnly {
-			a.Data.Options["history"] = 0
-			a.Data.Options["persistent"] = 0
-		} else {
-			a.Data.Options = m
-		}
-		a.Data.OffLineInfo = m
+		//a.ReqIdentifier = 1003
+		//a.PlatformID = s.PlatformID
+		//a.SendID = s.SendID
+		//a.SenderFaceURL = s.SenderFaceURL
+		//a.SenderNickName = s.SenderNickName
+		//a.OperationID = operationIDGenerator()
+		//a.Data.SessionType = s.SessionType
+		//a.Data.MsgFrom = s.MsgFrom
+		//a.Data.ContentType = s.ContentType
+		//a.Data.RecvID = s.RecvID
+		//a.Data.ForceList = s.ForceList
+		//a.Data.Content = s.Content
+		//a.Data.ClientMsgID = s.ClientMsgID
+		//if onlineUserOnly {
+		//	a.Data.Options["history"] = 0
+		//	a.Data.Options["persistent"] = 0
+		//} else {
+		//	a.Data.Options = m
+		//}
+		//a.Data.OffLineInfo = m
 
 		optionsFlag := make(map[string]int32, 2)
 		if onlineUserOnly {
@@ -963,7 +963,6 @@
 		} else {
 		}
 		wsMsgData := UserSendMsgReq{
-
 			Options:        optionsFlag,
 			SenderNickName: s.SenderNickName,
 			PlatformID:     s.PlatformID,
Index: go.mod
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module open_im_sdk\r\n\r\ngo 1.15\r\n\r\nrequire (\r\n\tgithub.com/golang/protobuf v1.5.2\r\n\tgithub.com/gorilla/websocket v1.4.2\r\n\tgithub.com/mattn/go-sqlite3 v1.14.7\r\n\tgithub.com/minio/minio-go/v6 v6.0.57\r\n\tgithub.com/shamsher31/goimgext v1.0.0 // indirect\r\n\tgithub.com/shamsher31/goimgtype v1.0.0\r\n\tgithub.com/tencentyun/cos-go-sdk-v5 v0.7.25\r\n\tgolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4\r\n\tgolang.org/x/sys v0.0.0-20210510120138-977fb7262007 // indirect\r\n\tgoogle.golang.org/grpc v1.41.0\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/go.mod b/go.mod
--- a/go.mod	(revision 3cf60c86d0b1958ca24189e6bc0c1b87f9f406c5)
+++ b/go.mod	(date 1635320846788)
@@ -4,13 +4,16 @@
 
 require (
 	github.com/golang/protobuf v1.5.2
+	github.com/google/uuid v1.1.2 // indirect
 	github.com/gorilla/websocket v1.4.2
 	github.com/mattn/go-sqlite3 v1.14.7
 	github.com/minio/minio-go/v6 v6.0.57
 	github.com/shamsher31/goimgext v1.0.0 // indirect
 	github.com/shamsher31/goimgtype v1.0.0
+	github.com/stretchr/testify v1.7.0 // indirect
 	github.com/tencentyun/cos-go-sdk-v5 v0.7.25
-	golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4
+	golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9 // indirect
+	golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4 // indirect
 	golang.org/x/sys v0.0.0-20210510120138-977fb7262007 // indirect
-	google.golang.org/grpc v1.41.0
+	golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 // indirect
 )
Index: test/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\r\n\r\nimport (\r\n\t\"encoding/json\"\r\n\t\"flag\"\r\n\t\"fmt\"\r\n\t\"io/ioutil\"\r\n\t\"math/rand\"\r\n\t\"open_im_sdk/open_im_sdk\"\r\n\t\"os\"\r\n\t\"strconv\"\r\n\t\"strings\"\r\n\t\"time\"\r\n)\r\n\r\n//\tvar bb BaseSuccFailed\r\n//\tbb.OnSuccess(\"ddd\")\r\n\r\n//\tvar tk = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVSUQiOiI3M2IwYzYzYmY2ZWZiYjkxIiwiUGxhdGZvcm0iOiJJT1MiLCJleHAiOjE2Mjc0NzU2MTYsImlhdCI6MTYyNjg3MDgxNiwibmJmIjoxNjI2ODcwODE2fQ.oVD0-_qjNckPMdBSfNcsDBLyPlLSnyqaz1T_jU91Pxw\"\r\n//\tvar uid = \"73b0c63bf6efbb91\"\r\n\r\n//\tws_local_server.Login(tk, uid)\r\n//open_im_sdk.Friend_uid = \"\"\r\n\r\n///func CreateVideoMessageFromFullPath(videoFullPath string, videoType string, duration int64, snapshotFullPath string) string {\r\n//open_im_sdk.DoTest(uid, tk)\r\n//\ts := open_im_sdk.CreateSoundMessageFromFullPath(\"D:\\\\1.wav\", 1)\r\n//\tfmt.Println(\"ssss\", s)\r\n//\topen_im_sdk.DoTestSendMsg(\"adaa5e370d7208b2\")\r\n//open_im_sdk.ForceReConn()\r\n//\topen_im_sdk.DotestKickGroupMember()\r\n//\topen_im_sdk.DoJoinGroup()\r\n//\topen_im_sdk.DoTestCreateGroup()\r\n//\topen_im_sdk.DotestGetJoinedGroupList()\r\n//open_im_sdk.DoJoinGroup()\r\n//\topen_im_sdk.DotesttestInviteUserToGroup()\r\n\r\n//\topen_im_sdk.DotestGetGroupMemberList()\r\n//\topen_im_sdk.DotestGetGroupMembersInfo()\r\n\r\n//s := open_im_sdk.CreateImageMessageFromFullPath(\"C:\\\\xyz.jpg\")\r\n//open_im_sdk.SendMessage(xx, s, open_im_sdk.Friend_uid, \"\", false )\r\n\r\n//\r\n//s := open_im_sdk.CreateVideoMessageFromFullPath(\"D:\\\\22.mp4\", \"mp4\", 58, \"D:\\\\11.jpeg\")\r\n\r\n//\ts  := open_im_sdk.CreateImageMessageFromFullPath(\".//11.jpeg\")\r\n//\ts := open_im_sdk.DoTestCreateImageMessage(\"11.jpeg\")\r\n\r\n//\ttime.Sleep(time.Duration(30) * time.Second)\r\n//open_im_sdk.DoTestSendMsg(s)\r\n//open_im_sdk.CreateImageMessage(\"11.jpeg\")\r\n\r\n//\topen_im_sdk.DoJoinGroup()\r\n//\topen_im_sdk.DoTestSendMsg(open_im_sdk.Friend_uid)\r\n//open_im_sdk.DoTestAcceptFriendApplicationdApplication()\r\n\r\n//\topen_im_sdk.DoTestDeleteFromFriendList()\r\n//\topen_im_sdk.DoTestRefuseFriendApplication()\r\n//\topen_im_sdk.DoTestAcceptFriendApplicationdApplication()\r\n//\topen_im_sdk.DoTestDeleteFromFriendList()\r\n//open_im_sdk.DoTestDeleteFromFriendList()\r\n//open_im_sdk.DoTestSendMsg(open_im_sdk.Friend_uid)\r\n//open_im_sdk.DoTestMarkC2CMessageAsRead()\r\n//\"2021-06-23 12:25:36-7eefe8fc74afd7c6adae6d0bc76929e90074d5bc-8522589345510912161\"\r\n//\topen_im_sdk.DoTestGetUsersInfo()\r\n\r\n//open_im_sdk.DoTestGetFriendList()\r\n//\topen_im_sdk.DoTestGetHistoryMessage(\"c93bc8b171cce7b9d1befb389abfe52f\")\r\n//open_im_sdk.DoTestGetUsersInfo()\r\n//open_im_sdk.DoTest(uid, tk)\r\n\r\n//open_im_sdk.DoCreateGroup()\r\n//open_im_sdk.DoSetGroupInfo()\r\n//open_im_sdk.DoGetGroupsInfo()\r\n//open_im_sdk.DoJoinGroup()\r\n//open_im_sdk.DoQuitGroup()\r\n\r\n//--------------------------------------\r\n//var cc = open_im_sdk.IMConfig{\r\n//\tPlatform:  1,\r\n//\tIpApiAddr: \"http://47.112.160.66:10000\",\r\n//\tIpWsAddr:  \"47.112.160.66:7777\",\r\n//}\r\n//b, _ := json.Marshal(cc)\r\n//v1, v2, v3 := InitSdk{}, InitSdk{}, InitSdk{}\r\n//open_im_sdk.InitSDK(string(b), v1)\r\n//open_im_sdk.Login(uid, tk, v2)\r\n\r\n// 转让群\r\n//open_im_sdk.TransferGroupOwner(\"05dc84b52829e82242a710ecf999c72c\", \"uid_1234\", v3)\r\n//open_im_sdk.GetGroupApplicationList(v3)\r\n//\r\n//var sctApplication groupApplication\r\n//sctApplication.GroupId = \"05dc84b52829e82242a710ecf999c72c\"\r\n//sctApplication.FromUser = \"61cd9ff3c88d64b42ff5ef930b9f007b\"\r\n//sctApplication.ToUser = \"0\"\r\n//\r\n//application, _ := json.Marshal(sctApplication)\r\n//open_im_sdk.AcceptGroupApplication(string(application), \"111\", v3)\r\n//open_im_sdk.RefuseGroupApplication(string(application), \"111\", v3)\r\n\r\n//\r\n//resp, _ := open_im_sdk.Upload(\"D:\\\\\\\\open-im-client-sdk\\\\test\\\\11.jpg\", ss)\r\n//\r\n//fmt.Println(resp)\r\n//\r\n//resp, _ = open_im_sdk.Upload(\"D:\\\\\\\\open-im-client-sdk\\\\test\\\\11.jpg\", ss)\r\n//\r\n//fmt.Println(resp)\r\n//for {\r\n//\ttime.Sleep(time.Second)\r\n//\topen_im_sdk.Login(uid, tk, v2)\r\n//}\r\n\r\n//open_im_sdk.upload(\"D:\\\\open-im-client-sdk\\\\test\\\\1.zip\", &open_im_sdk.SelfListener{})\r\n//open_im_sdk.Friend_uid = \"355d8dcb9582b6f51b14dee7be83cc7987ab08d8\"\r\n//\r\n//open_im_sdk.DoTest(uid, tk)\r\n//open_im_sdk.DotestSetSelfInfo()\r\n//open_im_sdk.DoTestGetUsersInfo()\r\n\r\n//\ttime.Sleep(time.Duration(5) * time.Second)\r\n//open_im_sdk.ForceReConn()\r\n\r\ntype GetTokenReq struct {\r\n\tSecret   string `json:\"secret\"`\r\n\tPlatform int    `json:\"platform\"`\r\n\tUid      string `json:\"uid\"`\r\n}\r\n\r\ntype RegisterReq struct {\r\n\tSecret   string `json:\"secret\"`\r\n\tPlatform int    `json:\"platform\"`\r\n\tUid      string `json:\"uid\"`\r\n\tName     string `json:\"name\"`\r\n}\r\n\r\ntype ResToken struct {\r\n\tData struct {\r\n\t\tExpiredTime int64  `json:\"expiredTime\"`\r\n\t\tToken       string `json:\"token\"`\r\n\t\tUid         string `json:\"uid\"`\r\n\t}\r\n\tErrCode int    `json:\"errCode\"`\r\n\tErrMsg  string `json:\"errMsg\"`\r\n}\r\n\r\nfunc register(uid string) error {\r\n\turl := REGISTERADDR\r\n\tvar req RegisterReq\r\n\treq.Platform = 1\r\n\treq.Uid = uid\r\n\treq.Secret = SECRET\r\n\treq.Name = uid\r\n\tr, err := open_im_sdk.Post2Api(url, req, \"\")\r\n\tif err != nil {\r\n\t\tfmt.Println(r, err)\r\n\t\treturn err\r\n\t}\r\n\r\n\treturn nil\r\n\r\n}\r\nfunc getToken(uid string) string {\r\n\turl := TOKENADDR\r\n\tvar req GetTokenReq\r\n\treq.Platform = 1\r\n\treq.Uid = uid\r\n\treq.Secret = SECRET\r\n\tr, err := open_im_sdk.Post2Api(url, req, \"\")\r\n\tif err != nil {\r\n\t\tfmt.Println(r, err)\r\n\t\treturn \"\"\r\n\t}\r\n\r\n\tvar stcResp ResToken\r\n\terr = json.Unmarshal(r, &stcResp)\r\n\tif stcResp.ErrCode != 0 {\r\n\t\tfmt.Println(stcResp.ErrCode, stcResp.ErrMsg)\r\n\t\treturn \"\"\r\n\t}\r\n\treturn stcResp.Data.Token\r\n\r\n}\r\n\r\ntype zx struct {\r\n}\r\n\r\nfunc (z zx) txexfc(uid int) int {\r\n\topen_im_sdk.LogBegin(uid)\r\n\tif uid == 0 {\r\n\t\treturn -1\r\n\t\topen_im_sdk.LogFReturn(-1)\r\n\t}\r\n\topen_im_sdk.LogSReturn(1)\r\n\treturn 1\r\n\r\n}\r\nfunc GenUid(uid int) string {\r\n\topen_im_sdk.LogBegin(uid)\r\n\r\n\tUidPrefix := \"open_im_test_uid_\"\r\n\topen_im_sdk.LogSReturn(UidPrefix + strconv.FormatInt(int64(uid), 10))\r\n\treturn UidPrefix + strconv.FormatInt(int64(uid), 10)\r\n}\r\n\r\nfunc GetFileContentAsStringLines(filePath string) ([]string, error) {\r\n\tresult := []string{}\r\n\tb, err := ioutil.ReadFile(filePath)\r\n\tif err != nil {\r\n\t\treturn result, err\r\n\t}\r\n\ts := string(b)\r\n\tfor _, lineStr := range strings.Split(s, \"\\n\") {\r\n\t\tlineStr = strings.TrimSpace(lineStr)\r\n\t\tif lineStr == \"\" {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tresult = append(result, lineStr)\r\n\t}\r\n\treturn result, nil\r\n}\r\n\r\nfunc GetCmd(myUid int, filename string) int {\r\n\tcmd, err := GetFileContentAsStringLines(\"cmd.txt\")\r\n\tif err != nil {\r\n\t\tfmt.Println(\"GetFileContentAsStringLines failed\")\r\n\t\treturn -1\r\n\t}\r\n\tif len(cmd) < myUid {\r\n\t\tfmt.Println(\"len failed\")\r\n\t\treturn -1\r\n\t}\r\n\treturn int(open_im_sdk.StringToInt64(cmd[myUid-1]))\r\n}\r\n\r\nfunc runRigister(strMyUid string) {\r\n\tfor true {\r\n\t\terr := register(strMyUid)\r\n\t\tif err == nil {\r\n\t\t\tbreak\r\n\t\t} else {\r\n\t\t\ttime.Sleep(time.Duration(30) * time.Second)\r\n\t\t\tcontinue\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc runGetToken(strMyUid string) string {\r\n\tvar token string\r\n\tfor true {\r\n\t\ttoken = getToken(strMyUid)\r\n\t\tif token == \"\" {\r\n\t\t\tfmt.Println(\"test_openim: get token failed\")\r\n\t\t\ttime.Sleep(time.Duration(30) * time.Second)\r\n\t\t\tcontinue\r\n\t\t} else {\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\treturn token\r\n}\r\n\r\nvar (\r\n\tAPIADDR      = \"http://120.24.45.199:10000\"\r\n\tWSADDR       = \"ws://120.24.45.199:17778\"\r\n\tREGISTERADDR = \"http://120.24.45.199:10000/auth/user_register\"\r\n\tTOKENADDR    = \"http://120.24.45.199:10000/auth/user_token\"\r\n\tSECRET       = \"tuoyun\"\r\n\tSENDINTERVAL = 100\r\n)\r\n\r\n// myuid,  maxuid,  msgnum\r\nfunc main() {\r\n\r\n\ttimeout := 5\r\n\tfor {\r\n\r\n\t\tselect {\r\n\r\n\t\tcase <-time.After(time.Second * time.Duration(timeout)):\r\n\t\t\tfmt.Println(\"sleep.............\")\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\tfmt.Println(\"break.............\")\r\n\r\n\t/*\r\n\t\topen_im_sdk.LogBegin(\"\")\r\n\t\tmyUid1 := 4\r\n\t\tstrMyUid1 := GenUid(myUid1)\r\n\r\n\t\trunRigister(strMyUid1)\r\n\t\ttoken1 := runGetToken(strMyUid1)\r\n\t\topen_im_sdk.DoTest(strMyUid1, token1, WSADDR, APIADDR)\r\n\t\t//recvId1 := GenUid(1)\r\n\r\n\t\t//\topen_im_sdk.DoTestSendMsg(strMyUid1, recvId1, \"test data 0->1\")\r\n\t\tfor true {\r\n\t\t\ttime.Sleep(time.Duration(60) * time.Second)\r\n\t\t\tfmt.Println(\"waiting\")\r\n\t\t}\r\n\t*/\r\n\r\n\tcmdfile := \"./cmd.txt\"\r\n\tuid := flag.Int(\"uid\", 1, \"RpcToken default listen port 10800\")\r\n\tuidCount := flag.Int(\"uid_count\", 2, \"RpcToken default listen port 10800\")\r\n\tmessageCount := flag.Int(\"message_count\", 1, \"RpcToken default listen port 10800\")\r\n\tflag.Parse()\r\n\tvar myUid int = *uid\r\n\tvar uidNum int = *uidCount\r\n\tvar msgnum int = *messageCount\r\n\tfmt.Println(\"args is \", myUid, uidNum, msgnum)\r\n\tvar strMyUid string\r\n\topen_im_sdk.LogBegin()\r\n\tstrMyUid = GenUid(myUid)\r\n\r\n\trunRigister(strMyUid)\r\n\ttoken := runGetToken(strMyUid)\r\n\r\n\tcmd := GetCmd(myUid, cmdfile)\r\n\r\n\tfmt.Println(\"getcmd value \", cmd)\r\n\tswitch cmd {\r\n\tcase -1:\r\n\t\tfmt.Println(\"GetCmd failed \")\r\n\t\ttime.Sleep(time.Duration(1) * time.Second)\r\n\tcase 5:\r\n\t\tfmt.Println(\"wait 2 mins, then login\")\r\n\t\ttime.Sleep(time.Duration(1*60) * time.Second)\r\n\t\topen_im_sdk.DoTest(strMyUid, token, WSADDR, APIADDR)\r\n\t\tfmt.Println(\"login do test, only login\")\r\n\t\tfmt.Println(\"testmypid: \", os.Getpid())\r\n\tcase 6:\r\n\t\tfmt.Println(\"wait 4 mins, then login\")\r\n\t\ttime.Sleep(time.Duration(2*60) * time.Second)\r\n\t\topen_im_sdk.DoTest(strMyUid, token, WSADDR, APIADDR)\r\n\t\tfmt.Println(\"login do test, only login\")\r\n\t\tfmt.Println(\"testmypid: \", os.Getpid())\r\n\tcase 3:\r\n\t\tfmt.Println(\"wait 2 mins, then login and send\")\r\n\t\ttime.Sleep(time.Duration(1*60) * time.Second)\r\n\t\topen_im_sdk.DoTest(strMyUid, token, WSADDR, APIADDR)\r\n\t\tfmt.Println(\"login do test, login and send\")\r\n\r\n\t\tvar recvId string\r\n\t\tvar idx string\r\n\t\trand.Seed(time.Now().UnixNano())\r\n\t\tif msgnum == 0 {\r\n\t\t\tfmt.Println(\"dont send,  exit\")\r\n\t\t\tos.Exit(0)\r\n\t\t} else {\r\n\t\t\tfor i := 0; i < msgnum; i++ {\r\n\t\t\t\tvar r int\r\n\t\t\t\tfor true {\r\n\t\t\t\t\ttime.Sleep(time.Duration(SENDINTERVAL) * time.Millisecond)\r\n\r\n\t\t\t\t\tr = rand.Intn(uidNum) + 1\r\n\t\t\t\t\tfmt.Println(\"test rand \", myUid, uidNum, r)\r\n\t\t\t\t\tif r == myUid {\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trecvId = GenUid(r)\r\n\t\t\t\tidx = strconv.FormatInt(int64(i), 10)\r\n\r\n\t\t\t\topen_im_sdk.DoTestSendMsg(strMyUid, recvId, idx)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\tcase 4:\r\n\t\tfmt.Println(\"wait 4 mins, then login and send\")\r\n\t\ttime.Sleep(time.Duration(2*60) * time.Second)\r\n\t\topen_im_sdk.DoTest(strMyUid, token, WSADDR, APIADDR)\r\n\t\tfmt.Println(\"login do test, login and send\")\r\n\r\n\t\tvar recvId string\r\n\t\tvar idx string\r\n\t\trand.Seed(time.Now().UnixNano())\r\n\t\tif msgnum == 0 {\r\n\t\t\tfmt.Println(\"dont send,  exit\")\r\n\t\t\tos.Exit(0)\r\n\t\t} else {\r\n\t\t\tfor i := 0; i < msgnum; i++ {\r\n\t\t\t\tvar r int\r\n\t\t\t\tfor true {\r\n\t\t\t\t\ttime.Sleep(time.Duration(SENDINTERVAL) * time.Millisecond)\r\n\r\n\t\t\t\t\tr = rand.Intn(uidNum) + 1\r\n\t\t\t\t\tfmt.Println(\"test rand \", myUid, uidNum, r)\r\n\t\t\t\t\tif r == myUid {\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trecvId = GenUid(r)\r\n\t\t\t\tidx = strconv.FormatInt(int64(i), 10)\r\n\r\n\t\t\t\topen_im_sdk.DoTestSendMsg(strMyUid, recvId, idx)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\tcase 1:\r\n\t\tfmt.Println(\"only login\")\r\n\t\topen_im_sdk.DoTest(strMyUid, token, WSADDR, APIADDR)\r\n\t\tfmt.Println(\"login do test, only login...\")\r\n\t\tfmt.Println(\"testmypid: \", os.Getpid())\r\n\tcase 2:\r\n\t\tfmt.Println(\"login send\")\r\n\t\topen_im_sdk.DoTest(strMyUid, token, WSADDR, APIADDR)\r\n\t\tfmt.Println(\"login do test, login and send\")\r\n\r\n\t\tvar recvId string\r\n\t\tvar idx string\r\n\t\trand.Seed(time.Now().UnixNano())\r\n\t\tif msgnum == 0 {\r\n\t\t\tfmt.Println(\"dont send,  exit\")\r\n\t\t\tos.Exit(0)\r\n\t\t} else {\r\n\t\t\tfor i := 0; i < msgnum; i++ {\r\n\t\t\t\tvar r int\r\n\t\t\t\tfor true {\r\n\t\t\t\t\ttime.Sleep(time.Duration(SENDINTERVAL) * time.Millisecond)\r\n\r\n\t\t\t\t\tr = rand.Intn(uidNum) + 1\r\n\t\t\t\t\tfmt.Println(\"test rand \", myUid, uidNum, r)\r\n\t\t\t\t\tif r == myUid {\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trecvId = GenUid(r)\r\n\t\t\t\tidx = strconv.FormatInt(int64(i), 10)\r\n\r\n\t\t\t\topen_im_sdk.DoTestSendMsg(strMyUid, recvId, idx)\r\n\t\t\t}\r\n\t\t}\r\n\tcase 7:\r\n\t\tfmt.Println(\"random sleep and send\")\r\n\t\topen_im_sdk.DoTest(strMyUid, token, WSADDR, APIADDR)\r\n\r\n\t\tvar recvId string\r\n\t\tvar idx string\r\n\t\trand.Seed(time.Now().UnixNano())\r\n\t\tmaxSleep := 60\r\n\t\tmsgnum = 10\r\n\t\tif msgnum == 0 {\r\n\t\t\tfmt.Println(\"dont send,  exit\")\r\n\t\t\tos.Exit(0)\r\n\t\t} else {\r\n\t\t\tfor i := 0; i < msgnum; i++ {\r\n\t\t\t\tvar r int\r\n\t\t\t\tfor true {\r\n\t\t\t\t\ttime.Sleep(time.Duration(rand.Intn(maxSleep)+1) * time.Second)\r\n\t\t\t\t\tr = rand.Intn(uidNum) + 1\r\n\t\t\t\t\tfmt.Println(\"test rand \", myUid, uidNum, r)\r\n\t\t\t\t\tif r == myUid {\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trecvId = GenUid(r)\r\n\t\t\t\tidx = strconv.FormatInt(int64(i), 10)\r\n\r\n\t\t\t\topen_im_sdk.DoTestSendMsg(strMyUid, recvId, idx)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor true {\r\n\t\ttime.Sleep(time.Duration(60) * time.Second)\r\n\t\tfmt.Println(\"waiting\")\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/main.go b/test/main.go
--- a/test/main.go	(revision 3cf60c86d0b1958ca24189e6bc0c1b87f9f406c5)
+++ b/test/main.go	(date 1635320848904)
@@ -275,35 +275,20 @@
 // myuid,  maxuid,  msgnum
 func main() {
 
-	timeout := 5
-	for {
-
-		select {
-
-		case <-time.After(time.Second * time.Duration(timeout)):
-			fmt.Println("sleep.............")
-			break
-		}
-	}
-
-	fmt.Println("break.............")
-
-	/*
-		open_im_sdk.LogBegin("")
-		myUid1 := 4
-		strMyUid1 := GenUid(myUid1)
+	open_im_sdk.LogBegin("")
+	myUid1 := 0
+	strMyUid1 := GenUid(myUid1)
 
-		runRigister(strMyUid1)
-		token1 := runGetToken(strMyUid1)
-		open_im_sdk.DoTest(strMyUid1, token1, WSADDR, APIADDR)
-		//recvId1 := GenUid(1)
+	runRigister(strMyUid1)
+	token1 := runGetToken(strMyUid1)
+	open_im_sdk.DoTest(strMyUid1, token1, WSADDR, APIADDR)
+	recvId1 := GenUid(1)
 
-		//	open_im_sdk.DoTestSendMsg(strMyUid1, recvId1, "test data 0->1")
-		for true {
-			time.Sleep(time.Duration(60) * time.Second)
-			fmt.Println("waiting")
-		}
-	*/
+	open_im_sdk.DoTestSendMsg(strMyUid1, recvId1, "yyyyyyy")
+	for true {
+		time.Sleep(time.Duration(60) * time.Second)
+		fmt.Println("waiting")
+	}
 
 	cmdfile := "./cmd.txt"
 	uid := flag.Int("uid", 1, "RpcToken default listen port 10800")
@@ -450,7 +435,6 @@
 		var idx string
 		rand.Seed(time.Now().UnixNano())
 		maxSleep := 60
-		msgnum = 10
 		if msgnum == 0 {
 			fmt.Println("dont send,  exit")
 			os.Exit(0)
Index: go.sum
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\r\ncloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\r\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\r\ngithub.com/QcloudApi/qcloud_sign_golang v0.0.0-20141224014652-e4130a326409/go.mod h1:1pk82RBxDY/JZnPQrtqHlUFfCctgdorsd9M06fMynOM=\r\ngithub.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=\r\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\r\ngithub.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\r\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\r\ngithub.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=\r\ngithub.com/cncf/udpa/go v0.0.0-20201120205902-5459f2c99403/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=\r\ngithub.com/cncf/xds/go v0.0.0-20210805033703-aa0b78936158/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=\r\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\r\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\r\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\r\ngithub.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=\r\ngithub.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\r\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\r\ngithub.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=\r\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20201210154907-fd9021fe5dad/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=\r\ngithub.com/envoyproxy/go-control-plane v0.9.10-0.20210907150352-cf90f659a021/go.mod h1:AFq3mo9L8Lqqiid3OhADV3RfLJnjiw63cSpi+fDTRC0=\r\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\r\ngithub.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\r\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\r\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\r\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\r\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\r\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\r\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\r\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\r\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\r\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\r\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\r\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\r\ngithub.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\r\ngithub.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\r\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\r\ngithub.com/golang/protobuf v1.5.2 h1:ROPKBNFfQgOUMifHyP+KYbvpjbdoFNs+aK7DXlji0Tw=\r\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\r\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\r\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\r\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\r\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\r\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\r\ngithub.com/google/go-cmp v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=\r\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\r\ngithub.com/google/go-querystring v1.0.0 h1:Xkwi/a1rcvNg1PPYe5vI8GbeBY/jrVuDX5ASuANWTrk=\r\ngithub.com/google/go-querystring v1.0.0/go.mod h1:odCYkC5MyYFN7vkCjXpyrEuKhc/BUO6wN/zVPAxq5ck=\r\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\r\ngithub.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\r\ngithub.com/google/uuid v1.1.2 h1:EVhdT+1Kseyi1/pUmXKaFxYsDNy9RQYkMWRH68J/W7Y=\r\ngithub.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\r\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1 h1:EGx4pi6eqNxGaHF6qqu48+N2wcFQ5qg5FXgOdqsJ5d8=\r\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\r\ngithub.com/gorilla/websocket v1.4.2 h1:+/TMaTYc4QFitKJxsQ7Yye35DkWvkdLcvGKqM+x0Ufc=\r\ngithub.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\r\ngithub.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=\r\ngithub.com/json-iterator/go v1.1.9 h1:9yzud/Ht36ygwatGx56VwCZtlI/2AD15T1X2sjSuGns=\r\ngithub.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\r\ngithub.com/jtolds/gls v4.20.0+incompatible h1:xdiiI2gbIgH/gLH7ADydsJ1uDOEzR8yvV7C0MuV77Wo=\r\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\r\ngithub.com/klauspost/cpuid v1.2.3 h1:CCtW0xUnWGVINKvE/WWOYKdsPV6mawAtvQuSl8guwQs=\r\ngithub.com/klauspost/cpuid v1.2.3/go.mod h1:Pj4uuM528wm8OyEC2QMXAi2YiTZ96dNQPGgoMS4s3ek=\r\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\r\ngithub.com/mattn/go-sqlite3 v1.14.7 h1:fxWBnXkxfM6sRiuH3bqJ4CfzZojMOLVc0UTsTglEghA=\r\ngithub.com/mattn/go-sqlite3 v1.14.7/go.mod h1:NyWgC/yNuGj7Q9rpYnZvas74GogHl5/Z4A/KQRfk6bU=\r\ngithub.com/minio/md5-simd v1.1.0 h1:QPfiOqlZH+Cj9teu0t9b1nTBfPbyTl16Of5MeuShdK4=\r\ngithub.com/minio/md5-simd v1.1.0/go.mod h1:XpBqgZULrMYD3R+M28PcmP0CkI7PEMzB3U77ZrKZ0Gw=\r\ngithub.com/minio/minio-go/v6 v6.0.57 h1:ixPkbKkyD7IhnluRgQpGSpHdpvNVaW6OD5R9IAO/9Tw=\r\ngithub.com/minio/minio-go/v6 v6.0.57/go.mod h1:5+R/nM9Pwrh0vqF+HbYYDQ84wdUFPyXHkrdT4AIkifM=\r\ngithub.com/minio/sha256-simd v0.1.1 h1:5QHSlgo3nt5yKOJrC7W8w7X+NFl8cMPZm96iu8kKUJU=\r\ngithub.com/minio/sha256-simd v0.1.1/go.mod h1:B5e1o+1/KgNmWrSQK08Y6Z1Vb5pwIktudl0J58iy0KM=\r\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\r\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\r\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 h1:ZqeYNhU3OHLH3mGKHDcjJRFFRrJa6eAM5H+CtDdOsPc=\r\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\r\ngithub.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742 h1:Esafd1046DLDQ0W1YjYsBW+p8U2u7vzgW2SQVmlNazg=\r\ngithub.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\r\ngithub.com/mozillazg/go-httpheader v0.2.1 h1:geV7TrjbL8KXSyvghnFm+NyTux/hxwueTSrwhe88TQQ=\r\ngithub.com/mozillazg/go-httpheader v0.2.1/go.mod h1:jJ8xECTlalr6ValeXYdOF8fFUISeBAdw6E61aqQma60=\r\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\r\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\r\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\r\ngithub.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=\r\ngithub.com/shamsher31/goimgext v1.0.0 h1:wFKf9GeeE0Xr6UQtliaPgYYgTju2izobM7XpCEgUCC8=\r\ngithub.com/shamsher31/goimgext v1.0.0/go.mod h1:rYLKgXuTGBIaH49z+jUVSWz7gUWIZmqvYUsdvJbNNOc=\r\ngithub.com/shamsher31/goimgtype v1.0.0 h1:7nmPz5GEb01sjFUojCbZJcBI68A8tmLXoCFbb5I34u4=\r\ngithub.com/shamsher31/goimgtype v1.0.0/go.mod h1:OZm3NZQDbK0ezlk9IV5oq3cWQwjF1oVSxKNx19bkf64=\r\ngithub.com/sirupsen/logrus v1.5.0/go.mod h1:+F7Ogzej0PZc/94MaYx/nvG9jOFMD2osvC3s+Squfpo=\r\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d h1:zE9ykElWQ6/NYmHa3jpm/yHnI4xSofP+UP6SpjHcSeM=\r\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\r\ngithub.com/smartystreets/goconvey v0.0.0-20190330032615-68dc04aab96a h1:pa8hGb/2YqsZKovtsgrwcDH1RZhVbTKCjLp47XpqCDs=\r\ngithub.com/smartystreets/goconvey v0.0.0-20190330032615-68dc04aab96a/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\r\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\r\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\r\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\r\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\r\ngithub.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=\r\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\r\ngithub.com/tencentyun/cos-go-sdk-v5 v0.7.25 h1:CvVHCy46TKU1ibT7FLb2i46CIrmwWPZIcky/m+7WzQQ=\r\ngithub.com/tencentyun/cos-go-sdk-v5 v0.7.25/go.mod h1:wQBO5HdAkLjj2q6XQiIfDSP8DXDNrppDRw2Kp/1BODA=\r\ngo.opentelemetry.io/proto/otlp v0.7.0/go.mod h1:PqfVotwruBrMGOCsRd/89rSnXhoiJIqeYNgFYFoEGnI=\r\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\r\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\r\ngolang.org/x/crypto v0.0.0-20190513172903-22d7a77e9e5f/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\r\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9 h1:psW17arqaxU48Z5kZ0CQnkZWQJsqcURM6tKiBApRjXI=\r\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\r\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\r\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\r\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\r\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\r\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\r\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\r\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\r\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\r\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\r\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\r\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\r\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\r\ngolang.org/x/net v0.0.0-20190522155817-f3200d17e092/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\r\ngolang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\r\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4 h1:4nGaVu0QrbjT/AK2PRLuQfQuh6DJve+pELhqTdAj3x0=\r\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\r\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\r\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\r\ngolang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\r\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\r\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\r\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\r\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\r\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\r\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\r\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\r\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007 h1:gG67DSER+11cZvqIMb8S8bt0vZtiN6xWYARwirrOSfE=\r\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\r\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\r\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\r\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\r\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\r\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\r\ngolang.org/x/text v0.3.3 h1:cokOdA+Jmi5PJGXLlLllQSgYigAEfHXJAERHVMaCc2k=\r\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\r\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\r\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\r\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\r\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\r\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\r\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\r\ngolang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\r\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\r\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\r\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\r\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\r\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\r\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\r\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\r\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\r\ngoogle.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\r\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013 h1:+kGHl1aib/qcwaRi1CbqBZ1rk19r85MNUf8HaBghugY=\r\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\r\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\r\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\r\ngoogle.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=\r\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\r\ngoogle.golang.org/grpc v1.33.1/go.mod h1:fr5YgcSWrqhRRxogOsw7RzIpsmvOZ6IcH4kBYTpR3n0=\r\ngoogle.golang.org/grpc v1.36.0/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=\r\ngoogle.golang.org/grpc v1.41.0 h1:f+PlOh7QV4iIJkPrx5NQ7qaNGFQ3OTse67yaDHfju4E=\r\ngoogle.golang.org/grpc v1.41.0/go.mod h1:U3l9uK9J0sini8mHphKoXyaqDA/8VyGnDee1zzIUK6k=\r\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\r\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\r\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\r\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\r\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\r\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\r\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\r\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\r\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\r\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\r\ngoogle.golang.org/protobuf v1.26.0 h1:bxAC2xTBsZGibn2RTntX0oH50xLsqy1OxA9tTL3p/lk=\r\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\r\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\r\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\r\ngopkg.in/ini.v1 v1.42.0 h1:7N3gPTt50s8GuLortA00n8AqRTk75qOP98+mTPpgzRk=\r\ngopkg.in/ini.v1 v1.42.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\r\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\r\ngopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\r\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo=\r\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\r\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\r\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/go.sum b/go.sum
--- a/go.sum	(revision 3cf60c86d0b1958ca24189e6bc0c1b87f9f406c5)
+++ b/go.sum	(date 1635320848947)
@@ -1,46 +1,11 @@
-cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
-cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
-github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
 github.com/QcloudApi/qcloud_sign_golang v0.0.0-20141224014652-e4130a326409/go.mod h1:1pk82RBxDY/JZnPQrtqHlUFfCctgdorsd9M06fMynOM=
-github.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=
-github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
-github.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
-github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=
-github.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=
-github.com/cncf/udpa/go v0.0.0-20201120205902-5459f2c99403/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=
-github.com/cncf/xds/go v0.0.0-20210805033703-aa0b78936158/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=
-github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
-github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
-github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
-github.com/envoyproxy/go-control-plane v0.9.9-0.20201210154907-fd9021fe5dad/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=
-github.com/envoyproxy/go-control-plane v0.9.10-0.20210907150352-cf90f659a021/go.mod h1:AFq3mo9L8Lqqiid3OhADV3RfLJnjiw63cSpi+fDTRC0=
-github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
-github.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=
-github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
-github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
-github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
-github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
-github.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=
-github.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=
-github.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=
-github.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=
-github.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=
-github.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=
-github.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=
-github.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
-github.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
 github.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=
 github.com/golang/protobuf v1.5.2 h1:ROPKBNFfQgOUMifHyP+KYbvpjbdoFNs+aK7DXlji0Tw=
 github.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=
-github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
-github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
-github.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
-github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
-github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=
 github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-querystring v1.0.0 h1:Xkwi/a1rcvNg1PPYe5vI8GbeBY/jrVuDX5ASuANWTrk=
@@ -53,7 +18,6 @@
 github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=
 github.com/gorilla/websocket v1.4.2 h1:+/TMaTYc4QFitKJxsQ7Yye35DkWvkdLcvGKqM+x0Ufc=
 github.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
-github.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=
 github.com/json-iterator/go v1.1.9 h1:9yzud/Ht36ygwatGx56VwCZtlI/2AD15T1X2sjSuGns=
 github.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
 github.com/jtolds/gls v4.20.0+incompatible h1:xdiiI2gbIgH/gLH7ADydsJ1uDOEzR8yvV7C0MuV77Wo=
@@ -79,8 +43,6 @@
 github.com/mozillazg/go-httpheader v0.2.1/go.mod h1:jJ8xECTlalr6ValeXYdOF8fFUISeBAdw6E61aqQma60=
 github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
-github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
-github.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=
 github.com/shamsher31/goimgext v1.0.0 h1:wFKf9GeeE0Xr6UQtliaPgYYgTju2izobM7XpCEgUCC8=
 github.com/shamsher31/goimgext v1.0.0/go.mod h1:rYLKgXuTGBIaH49z+jUVSWz7gUWIZmqvYUsdvJbNNOc=
 github.com/shamsher31/goimgtype v1.0.0 h1:7nmPz5GEb01sjFUojCbZJcBI68A8tmLXoCFbb5I34u4=
@@ -93,47 +55,28 @@
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
 github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
-github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=
 github.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=
 github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/tencentyun/cos-go-sdk-v5 v0.7.25 h1:CvVHCy46TKU1ibT7FLb2i46CIrmwWPZIcky/m+7WzQQ=
 github.com/tencentyun/cos-go-sdk-v5 v0.7.25/go.mod h1:wQBO5HdAkLjj2q6XQiIfDSP8DXDNrppDRw2Kp/1BODA=
-go.opentelemetry.io/proto/otlp v0.7.0/go.mod h1:PqfVotwruBrMGOCsRd/89rSnXhoiJIqeYNgFYFoEGnI=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20190513172903-22d7a77e9e5f/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9 h1:psW17arqaxU48Z5kZ0CQnkZWQJsqcURM6tKiBApRjXI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
-golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
-golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
-golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
-golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
-golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
-golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
-golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190522155817-f3200d17e092/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=
-golang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
 golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4 h1:4nGaVu0QrbjT/AK2PRLuQfQuh6DJve+pELhqTdAj3x0=
 golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=
 golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=
-golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
-golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
-golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -150,38 +93,10 @@
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
-golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
-golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
-golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
-golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=
 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
-google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=
-google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
-google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
-google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
-google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
-google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013 h1:+kGHl1aib/qcwaRi1CbqBZ1rk19r85MNUf8HaBghugY=
-google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
-google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
-google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
-google.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=
-google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
-google.golang.org/grpc v1.33.1/go.mod h1:fr5YgcSWrqhRRxogOsw7RzIpsmvOZ6IcH4kBYTpR3n0=
-google.golang.org/grpc v1.36.0/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=
-google.golang.org/grpc v1.41.0 h1:f+PlOh7QV4iIJkPrx5NQ7qaNGFQ3OTse67yaDHfju4E=
-google.golang.org/grpc v1.41.0/go.mod h1:U3l9uK9J0sini8mHphKoXyaqDA/8VyGnDee1zzIUK6k=
-google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
-google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
-google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
-google.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=
-google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=
-google.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
-google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
-google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
-google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0 h1:bxAC2xTBsZGibn2RTntX0oH50xLsqy1OxA9tTL3p/lk=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
@@ -189,9 +104,5 @@
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/ini.v1 v1.42.0 h1:7N3gPTt50s8GuLortA00n8AqRTk75qOP98+mTPpgzRk=
 gopkg.in/ini.v1 v1.42.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=
-gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
-gopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
-honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
-honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
