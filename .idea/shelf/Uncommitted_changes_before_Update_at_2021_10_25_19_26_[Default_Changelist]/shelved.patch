Index: test/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\r\n\r\nimport (\r\n\t\"encoding/json\"\r\n\t\"flag\"\r\n\t\"fmt\"\r\n\t\"io/ioutil\"\r\n\t\"math/rand\"\r\n\t\"open_im_sdk/open_im_sdk\"\r\n\t\"strconv\"\r\n\t\"strings\"\r\n\t\"time\"\r\n)\r\n\r\n//\tvar bb BaseSuccFailed\r\n//\tbb.OnSuccess(\"ddd\")\r\n\r\n//\tvar tk = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVSUQiOiI3M2IwYzYzYmY2ZWZiYjkxIiwiUGxhdGZvcm0iOiJJT1MiLCJleHAiOjE2Mjc0NzU2MTYsImlhdCI6MTYyNjg3MDgxNiwibmJmIjoxNjI2ODcwODE2fQ.oVD0-_qjNckPMdBSfNcsDBLyPlLSnyqaz1T_jU91Pxw\"\r\n//\tvar uid = \"73b0c63bf6efbb91\"\r\n\r\n//\tws_local_server.Login(tk, uid)\r\n//open_im_sdk.Friend_uid = \"\"\r\n\r\n///func CreateVideoMessageFromFullPath(videoFullPath string, videoType string, duration int64, snapshotFullPath string) string {\r\n//open_im_sdk.DoTest(uid, tk)\r\n//\ts := open_im_sdk.CreateSoundMessageFromFullPath(\"D:\\\\1.wav\", 1)\r\n//\tfmt.Println(\"ssss\", s)\r\n//\topen_im_sdk.DoTestSendMsg(\"adaa5e370d7208b2\")\r\n//open_im_sdk.ForceReConn()\r\n//\topen_im_sdk.DotestKickGroupMember()\r\n//\topen_im_sdk.DoJoinGroup()\r\n//\topen_im_sdk.DoTestCreateGroup()\r\n//\topen_im_sdk.DotestGetJoinedGroupList()\r\n//open_im_sdk.DoJoinGroup()\r\n//\topen_im_sdk.DotesttestInviteUserToGroup()\r\n\r\n//\topen_im_sdk.DotestGetGroupMemberList()\r\n//\topen_im_sdk.DotestGetGroupMembersInfo()\r\n\r\n//s := open_im_sdk.CreateImageMessageFromFullPath(\"C:\\\\xyz.jpg\")\r\n//open_im_sdk.SendMessage(xx, s, open_im_sdk.Friend_uid, \"\", false )\r\n\r\n//\r\n//s := open_im_sdk.CreateVideoMessageFromFullPath(\"D:\\\\22.mp4\", \"mp4\", 58, \"D:\\\\11.jpeg\")\r\n\r\n//\ts  := open_im_sdk.CreateImageMessageFromFullPath(\".//11.jpeg\")\r\n//\ts := open_im_sdk.DoTestCreateImageMessage(\"11.jpeg\")\r\n\r\n//\ttime.Sleep(time.Duration(30) * time.Second)\r\n//open_im_sdk.DoTestSendMsg(s)\r\n//open_im_sdk.CreateImageMessage(\"11.jpeg\")\r\n\r\n//\topen_im_sdk.DoJoinGroup()\r\n//\topen_im_sdk.DoTestSendMsg(open_im_sdk.Friend_uid)\r\n//open_im_sdk.DoTestAcceptFriendApplicationdApplication()\r\n\r\n//\topen_im_sdk.DoTestDeleteFromFriendList()\r\n//\topen_im_sdk.DoTestRefuseFriendApplication()\r\n//\topen_im_sdk.DoTestAcceptFriendApplicationdApplication()\r\n//\topen_im_sdk.DoTestDeleteFromFriendList()\r\n//open_im_sdk.DoTestDeleteFromFriendList()\r\n//open_im_sdk.DoTestSendMsg(open_im_sdk.Friend_uid)\r\n//open_im_sdk.DoTestMarkC2CMessageAsRead()\r\n//\"2021-06-23 12:25:36-7eefe8fc74afd7c6adae6d0bc76929e90074d5bc-8522589345510912161\"\r\n//\topen_im_sdk.DoTestGetUsersInfo()\r\n\r\n//open_im_sdk.DoTestGetFriendList()\r\n//\topen_im_sdk.DoTestGetHistoryMessage(\"c93bc8b171cce7b9d1befb389abfe52f\")\r\n//open_im_sdk.DoTestGetUsersInfo()\r\n//open_im_sdk.DoTest(uid, tk)\r\n\r\n//open_im_sdk.DoCreateGroup()\r\n//open_im_sdk.DoSetGroupInfo()\r\n//open_im_sdk.DoGetGroupsInfo()\r\n//open_im_sdk.DoJoinGroup()\r\n//open_im_sdk.DoQuitGroup()\r\n\r\n//--------------------------------------\r\n//var cc = open_im_sdk.IMConfig{\r\n//\tPlatform:  1,\r\n//\tIpApiAddr: \"http://47.112.160.66:10000\",\r\n//\tIpWsAddr:  \"47.112.160.66:7777\",\r\n//}\r\n//b, _ := json.Marshal(cc)\r\n//v1, v2, v3 := InitSdk{}, InitSdk{}, InitSdk{}\r\n//open_im_sdk.InitSDK(string(b), v1)\r\n//open_im_sdk.Login(uid, tk, v2)\r\n\r\n// 转让群\r\n//open_im_sdk.TransferGroupOwner(\"05dc84b52829e82242a710ecf999c72c\", \"uid_1234\", v3)\r\n//open_im_sdk.GetGroupApplicationList(v3)\r\n//\r\n//var sctApplication groupApplication\r\n//sctApplication.GroupId = \"05dc84b52829e82242a710ecf999c72c\"\r\n//sctApplication.FromUser = \"61cd9ff3c88d64b42ff5ef930b9f007b\"\r\n//sctApplication.ToUser = \"0\"\r\n//\r\n//application, _ := json.Marshal(sctApplication)\r\n//open_im_sdk.AcceptGroupApplication(string(application), \"111\", v3)\r\n//open_im_sdk.RefuseGroupApplication(string(application), \"111\", v3)\r\n\r\n//\r\n//resp, _ := open_im_sdk.Upload(\"D:\\\\\\\\open-im-client-sdk\\\\test\\\\11.jpg\", ss)\r\n//\r\n//fmt.Println(resp)\r\n//\r\n//resp, _ = open_im_sdk.Upload(\"D:\\\\\\\\open-im-client-sdk\\\\test\\\\11.jpg\", ss)\r\n//\r\n//fmt.Println(resp)\r\n//for {\r\n//\ttime.Sleep(time.Second)\r\n//\topen_im_sdk.Login(uid, tk, v2)\r\n//}\r\n\r\n//open_im_sdk.upload(\"D:\\\\open-im-client-sdk\\\\test\\\\1.zip\", &open_im_sdk.SelfListener{})\r\n//open_im_sdk.Friend_uid = \"355d8dcb9582b6f51b14dee7be83cc7987ab08d8\"\r\n//\r\n//open_im_sdk.DoTest(uid, tk)\r\n//open_im_sdk.DotestSetSelfInfo()\r\n//open_im_sdk.DoTestGetUsersInfo()\r\n\r\n//\ttime.Sleep(time.Duration(5) * time.Second)\r\n//open_im_sdk.ForceReConn()\r\n\r\ntype GetTokenReq struct {\r\n\tSecret   string `json:\"secret\"`\r\n\tPlatform int    `json:\"platform\"`\r\n\tUid      string `json:\"uid\"`\r\n}\r\n\r\ntype RegisterReq struct {\r\n\tSecret   string `json:\"secret\"`\r\n\tPlatform int    `json:\"platform\"`\r\n\tUid      string `json:\"uid\"`\r\n\tName     string `json:\"name\"`\r\n}\r\n\r\ntype ResToken struct {\r\n\tData struct {\r\n\t\tExpiredTime int64  `json:\"expiredTime\"`\r\n\t\tToken       string `json:\"token\"`\r\n\t\tUid         string `json:\"uid\"`\r\n\t}\r\n\tErrCode int    `json:\"errCode\"`\r\n\tErrMsg  string `json:\"errMsg\"`\r\n}\r\n\r\nfunc register(uid string) error {\r\n\turl := \"http://120.24.45.199:10000/auth/user_register\"\r\n\tvar req RegisterReq\r\n\treq.Platform = 1\r\n\treq.Uid = uid\r\n\treq.Secret = \"tuoyun\"\r\n\treq.Name = uid\r\n\tr, err := open_im_sdk.Post2Api(url, req, \"\")\r\n\tif err != nil {\r\n\t\tfmt.Println(r, err)\r\n\t\treturn err\r\n\t}\r\n\r\n\treturn nil\r\n\r\n}\r\nfunc getToken(uid string) string {\r\n\turl := \"http://120.24.45.199:10000/auth/user_token\"\r\n\tvar req GetTokenReq\r\n\treq.Platform = 1\r\n\treq.Uid = uid\r\n\treq.Secret = \"tuoyun\"\r\n\tr, err := open_im_sdk.Post2Api(url, req, \"\")\r\n\tif err != nil {\r\n\t\tfmt.Println(r, err)\r\n\t\treturn \"\"\r\n\t}\r\n\r\n\tvar stcResp ResToken\r\n\terr = json.Unmarshal(r, &stcResp)\r\n\tif stcResp.ErrCode != 0 {\r\n\t\tfmt.Println(stcResp.ErrCode, stcResp.ErrMsg)\r\n\t\treturn \"\"\r\n\t}\r\n\treturn stcResp.Data.Token\r\n\r\n}\r\n\r\ntype zx struct {\r\n}\r\n\r\nfunc (z zx) txexfc(uid int) int {\r\n\topen_im_sdk.LogBegin(uid)\r\n\tif uid == 0 {\r\n\t\treturn -1\r\n\t\topen_im_sdk.LogFReturn(-1)\r\n\t}\r\n\topen_im_sdk.LogSReturn(1)\r\n\treturn 1\r\n\r\n}\r\nfunc GenUid(uid int) string {\r\n\topen_im_sdk.LogBegin(uid)\r\n\r\n\tUidPrefix := \"open_im_test_uid_\"\r\n\topen_im_sdk.LogSReturn(UidPrefix + strconv.FormatInt(int64(uid), 10))\r\n\treturn UidPrefix + strconv.FormatInt(int64(uid), 10)\r\n}\r\n\r\nfunc GetFileContentAsStringLines(filePath string) ([]string, error) {\r\n\tresult := []string{}\r\n\tb, err := ioutil.ReadFile(filePath)\r\n\tif err != nil {\r\n\t\treturn result, err\r\n\t}\r\n\ts := string(b)\r\n\tfor _, lineStr := range strings.Split(s, \"\\n\") {\r\n\t\tlineStr = strings.TrimSpace(lineStr)\r\n\t\tif lineStr == \"\" {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tresult = append(result, lineStr)\r\n\t}\r\n\treturn result, nil\r\n}\r\n\r\nfunc GetCmd(myUid int, filename string) int {\r\n\tcmd, err := GetFileContentAsStringLines(\"cmd.txt\")\r\n\tif err != nil {\r\n\t\tfmt.Println(\"GetFileContentAsStringLines failed\")\r\n\t\treturn -1\r\n\t}\r\n\tif len(cmd) < myUid {\r\n\t\tfmt.Println(\"len failed\")\r\n\t\treturn -1\r\n\t}\r\n\treturn int(open_im_sdk.StringToInt64(cmd[myUid-1]))\r\n}\r\n\r\nfunc runRigister(strMyUid string) {\r\n\tfor true {\r\n\t\terr := register(strMyUid)\r\n\t\tif err == nil {\r\n\t\t\tbreak\r\n\t\t} else {\r\n\t\t\ttime.Sleep(time.Duration(30) * time.Second)\r\n\t\t\tcontinue\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc runGetToken(strMyUid string) string {\r\n\tvar token string\r\n\tfor true {\r\n\t\ttoken = getToken(strMyUid)\r\n\t\tif token == \"\" {\r\n\t\t\tfmt.Println(\"test_openim: get token failed\")\r\n\t\t\ttime.Sleep(time.Duration(30) * time.Second)\r\n\t\t\tcontinue\r\n\t\t} else {\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\treturn token\r\n}\r\n\r\n// myuid,  maxuid,  msgnum\r\nfunc main() {\r\n\r\n\topen_im_sdk.LogBegin(\"\")\r\n\tmyUid1 := 0\r\n\tstrMyUid1 := GenUid(myUid1)\r\n\r\n\trunRigister(strMyUid1)\r\n\ttoken1 := runGetToken(strMyUid1)\r\n\topen_im_sdk.DoTest(strMyUid1, token1)\r\n\trecvId1 := GenUid(1)\r\n\r\n\topen_im_sdk.DoTestSendMsg(strMyUid1, recvId1, \"test data 0->1\")\r\n\tfor true {\r\n\t\ttime.Sleep(time.Duration(60) * time.Second)\r\n\t\tfmt.Println(\"waiting\")\r\n\t}\r\n\r\n\tcmdfile := \"./cmd.txt\"\r\n\tuid := flag.Int(\"uid\", 1, \"RpcToken default listen port 10800\")\r\n\tuidCount := flag.Int(\"uid_count\", 2, \"RpcToken default listen port 10800\")\r\n\tmessageCount := flag.Int(\"message_count\", 1, \"RpcToken default listen port 10800\")\r\n\tflag.Parse()\r\n\tvar myUid int = *uid\r\n\tvar uidNum int = *uidCount\r\n\tvar msgnum int = *messageCount\r\n\tfmt.Println(\"args is \", myUid, uidNum, msgnum)\r\n\tvar strMyUid string\r\n\topen_im_sdk.LogBegin()\r\n\tstrMyUid = GenUid(myUid)\r\n\r\n\trunRigister(strMyUid)\r\n\ttoken := runGetToken(strMyUid)\r\n\r\n\tcmd := GetCmd(myUid, cmdfile)\r\n\r\n\tfmt.Println(\"getcmd value \", cmd)\r\n\tswitch cmd {\r\n\tcase -1:\r\n\t\tfmt.Println(\"GetCmd failed \")\r\n\t\ttime.Sleep(time.Duration(1) * time.Second)\r\n\tcase 5:\r\n\t\tfmt.Println(\"wait 2 mins, then login\")\r\n\t\ttime.Sleep(time.Duration(2*60) * time.Second)\r\n\t\topen_im_sdk.DoTest(strMyUid, token)\r\n\t\tfmt.Println(\"login do test, only login\")\r\n\tcase 6:\r\n\t\tfmt.Println(\"wait 4 mins, then login\")\r\n\t\ttime.Sleep(time.Duration(4*60) * time.Second)\r\n\t\topen_im_sdk.DoTest(strMyUid, token)\r\n\t\tfmt.Println(\"login do test, only login\")\r\n\tcase 3:\r\n\t\tfmt.Println(\"wait 2 mins, then login and send\")\r\n\t\ttime.Sleep(time.Duration(2*60) * time.Second)\r\n\t\topen_im_sdk.DoTest(strMyUid, token)\r\n\t\tfmt.Println(\"login do test, login and send\")\r\n\r\n\t\tvar recvId string\r\n\t\tvar idx string\r\n\t\trand.Seed(time.Now().UnixNano())\r\n\t\tif msgnum == 0 {\r\n\t\t} else {\r\n\t\t\tfor i := 0; i < msgnum; i++ {\r\n\t\t\t\tvar r int\r\n\t\t\t\tfor true {\r\n\t\t\t\t\ttime.Sleep(time.Duration(2000) * time.Millisecond)\r\n\r\n\t\t\t\t\tr = rand.Intn(uidNum) + 1\r\n\t\t\t\t\tfmt.Println(\"test rand \", myUid, uidNum, r)\r\n\t\t\t\t\tif r == myUid {\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trecvId = GenUid(r)\r\n\t\t\t\tidx = strconv.FormatInt(int64(i), 10)\r\n\r\n\t\t\t\topen_im_sdk.DoTestSendMsg(strMyUid, recvId, idx)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\tcase 4:\r\n\t\tfmt.Println(\"wait 4 mins, then login and send\")\r\n\t\ttime.Sleep(time.Duration(4*60) * time.Second)\r\n\t\topen_im_sdk.DoTest(strMyUid, token)\r\n\t\tfmt.Println(\"login do test, login and send\")\r\n\r\n\t\tvar recvId string\r\n\t\tvar idx string\r\n\t\trand.Seed(time.Now().UnixNano())\r\n\t\tif msgnum == 0 {\r\n\t\t} else {\r\n\t\t\tfor i := 0; i < msgnum; i++ {\r\n\t\t\t\tvar r int\r\n\t\t\t\tfor true {\r\n\t\t\t\t\ttime.Sleep(time.Duration(2000) * time.Millisecond)\r\n\r\n\t\t\t\t\tr = rand.Intn(uidNum) + 1\r\n\t\t\t\t\tfmt.Println(\"test rand \", myUid, uidNum, r)\r\n\t\t\t\t\tif r == myUid {\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trecvId = GenUid(r)\r\n\t\t\t\tidx = strconv.FormatInt(int64(i), 10)\r\n\r\n\t\t\t\topen_im_sdk.DoTestSendMsg(strMyUid, recvId, idx)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\tcase 1:\r\n\t\tfmt.Println(\"only login\")\r\n\t\topen_im_sdk.DoTest(strMyUid, token)\r\n\t\tfmt.Println(\"login do test, only login...\")\r\n\tcase 2:\r\n\t\tfmt.Println(\"login send\")\r\n\t\topen_im_sdk.DoTest(strMyUid, token)\r\n\t\tfmt.Println(\"login do test, login and send\")\r\n\r\n\t\tvar recvId string\r\n\t\tvar idx string\r\n\t\trand.Seed(time.Now().UnixNano())\r\n\t\tif msgnum == 0 {\r\n\t\t} else {\r\n\t\t\tfor i := 0; i < msgnum; i++ {\r\n\t\t\t\tvar r int\r\n\t\t\t\tfor true {\r\n\t\t\t\t\ttime.Sleep(time.Duration(2000) * time.Millisecond)\r\n\r\n\t\t\t\t\tr = rand.Intn(uidNum) + 1\r\n\t\t\t\t\tfmt.Println(\"test rand \", myUid, uidNum, r)\r\n\t\t\t\t\tif r == myUid {\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trecvId = GenUid(r)\r\n\t\t\t\tidx = strconv.FormatInt(int64(i), 10)\r\n\r\n\t\t\t\topen_im_sdk.DoTestSendMsg(strMyUid, recvId, idx)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor true {\r\n\t\ttime.Sleep(time.Duration(60) * time.Second)\r\n\t\tfmt.Println(\"waiting\")\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/main.go b/test/main.go
--- a/test/main.go	(revision 5231ab7ce00b01aca611d42a3104677d84bb4804)
+++ b/test/main.go	(date 1635156920590)
@@ -266,15 +266,15 @@
 func main() {
 
 	open_im_sdk.LogBegin("")
-	myUid1 := 0
+	myUid1 := 1
 	strMyUid1 := GenUid(myUid1)
 
 	runRigister(strMyUid1)
 	token1 := runGetToken(strMyUid1)
 	open_im_sdk.DoTest(strMyUid1, token1)
-	recvId1 := GenUid(1)
+	//recvId1 := GenUid(1)
 
-	open_im_sdk.DoTestSendMsg(strMyUid1, recvId1, "test data 0->1")
+	//open_im_sdk.DoTestSendMsg(strMyUid1, recvId1, "test data 0->1")
 	for true {
 		time.Sleep(time.Duration(60) * time.Second)
 		fmt.Println("waiting")
